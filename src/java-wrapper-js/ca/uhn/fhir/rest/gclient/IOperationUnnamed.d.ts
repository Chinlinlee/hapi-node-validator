import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IOperationUntyped as ca_uhn_fhir_rest_gclient_IOperationUntyped } from "./IOperationUntyped";
/**
 * This class just defines types, you should import {@link IOperationUnnamed} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOperationUnnamedClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationUntyped'
     */
    named(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_IOperationUntyped | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationUntyped'
     */
    namedSync(var0: string | null): ca_uhn_fhir_rest_gclient_IOperationUntyped | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIOperationUnnamedProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IOperationUnnamedInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationUntyped'
     */
    named(var0: string | null): ca_uhn_fhir_rest_gclient_IOperationUntyped | null;
}
/**
 * Create a proxy for the {@link IOperationUnnamed} interface.
 * All required methods in {@link IOperationUnnamedInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIOperationUnnamedProxy(methods: IOperationUnnamedInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IOperationUnnamedInterface>;
declare const IOperationUnnamed_base: typeof IOperationUnnamedClass;
/**
 * Class ca.uhn.fhir.rest.gclient.IOperationUnnamed.
 *
 * This actually imports the java class for further use.
 * The class {@link IOperationUnnamedClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOperationUnnamed extends IOperationUnnamed_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IOperationUnnamed;
//# sourceMappingURL=IOperationUnnamed.d.ts.map