import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { ICriterion as ca_uhn_fhir_rest_gclient_ICriterion } from "./ICriterion";
import { IPrimitiveType as org_hl7_fhir_instance_model_api_IPrimitiveType, IPrimitiveTypeInterface as org_hl7_fhir_instance_model_api_IPrimitiveTypeInterface } from "./../../../../../org/hl7/fhir/instance/model/api/IPrimitiveType";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./../../../../../java/util/List";
/**
 * This class just defines types, you should import {@link StringClientParam$IStringMatch} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class StringClientParam$IStringMatchClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IPrimitiveType'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    value(var0: org_hl7_fhir_instance_model_api_IPrimitiveType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IPrimitiveTypeInterface> | null): Promise<ca_uhn_fhir_rest_gclient_ICriterion | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IPrimitiveType'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    valueSync(var0: org_hl7_fhir_instance_model_api_IPrimitiveType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IPrimitiveTypeInterface> | null): ca_uhn_fhir_rest_gclient_ICriterion | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    value(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_ICriterion | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    valueSync(var0: string | null): ca_uhn_fhir_rest_gclient_ICriterion | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    values(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): Promise<ca_uhn_fhir_rest_gclient_ICriterion | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    valuesSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): ca_uhn_fhir_rest_gclient_ICriterion | null;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    values(var0: (string | null)[] | null): Promise<ca_uhn_fhir_rest_gclient_ICriterion | null>;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    valuesSync(var0: (string | null)[] | null): ca_uhn_fhir_rest_gclient_ICriterion | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createStringClientParam$IStringMatchProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface StringClientParam$IStringMatchInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IPrimitiveType'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    value(var0: org_hl7_fhir_instance_model_api_IPrimitiveType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IPrimitiveTypeInterface> | null): ca_uhn_fhir_rest_gclient_ICriterion | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    value(var0: string | null): ca_uhn_fhir_rest_gclient_ICriterion | null;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    values(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): ca_uhn_fhir_rest_gclient_ICriterion | null;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    values(var0: (string | null)[] | null): ca_uhn_fhir_rest_gclient_ICriterion | null;
}
/**
 * Create a proxy for the {@link StringClientParam$IStringMatch} interface.
 * All required methods in {@link StringClientParam$IStringMatchInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createStringClientParam$IStringMatchProxy(methods: StringClientParam$IStringMatchInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<StringClientParam$IStringMatchInterface>;
declare const StringClientParam$IStringMatch_base: typeof StringClientParam$IStringMatchClass;
/**
 * Class ca.uhn.fhir.rest.gclient.StringClientParam$IStringMatch.
 *
 * This actually imports the java class for further use.
 * The class {@link StringClientParam$IStringMatchClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class StringClientParam$IStringMatch extends StringClientParam$IStringMatch_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default StringClientParam$IStringMatch;
//# sourceMappingURL=StringClientParam$IStringMatch.d.ts.map