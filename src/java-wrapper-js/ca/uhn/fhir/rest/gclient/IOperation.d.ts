import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IOperationUnnamed as ca_uhn_fhir_rest_gclient_IOperationUnnamed } from "./IOperationUnnamed";
import { IIdType as org_hl7_fhir_instance_model_api_IIdType, IIdTypeInterface as org_hl7_fhir_instance_model_api_IIdTypeInterface } from "./../../../../../org/hl7/fhir/instance/model/api/IIdType";
import { IOperationProcessMsg as ca_uhn_fhir_rest_gclient_IOperationProcessMsg } from "./IOperationProcessMsg";
import { Class as java_lang_Class } from "./../../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link IOperation} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOperationClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IIdType'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationUnnamed'
     */
    onInstanceVersion(var0: org_hl7_fhir_instance_model_api_IIdType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IIdTypeInterface> | null): Promise<ca_uhn_fhir_rest_gclient_IOperationUnnamed | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IIdType'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationUnnamed'
     */
    onInstanceVersionSync(var0: org_hl7_fhir_instance_model_api_IIdType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IIdTypeInterface> | null): ca_uhn_fhir_rest_gclient_IOperationUnnamed | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationProcessMsg'
     */
    processMessage(): Promise<ca_uhn_fhir_rest_gclient_IOperationProcessMsg | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationProcessMsg'
     */
    processMessageSync(): ca_uhn_fhir_rest_gclient_IOperationProcessMsg | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    onInstance(var0: string | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    onInstanceSync(var0: string | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IIdType'
     * @return original return type: 'java.lang.Object'
     */
    onInstance(var0: org_hl7_fhir_instance_model_api_IIdType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IIdTypeInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IIdType'
     * @return original return type: 'java.lang.Object'
     */
    onInstanceSync(var0: org_hl7_fhir_instance_model_api_IIdType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IIdTypeInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    onServer(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    onServerSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Object'
     */
    onType(var0: java_lang_Class | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Object'
     */
    onTypeSync(var0: java_lang_Class | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    onType(var0: string | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    onTypeSync(var0: string | null): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIOperationProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IOperationInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IIdType'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationUnnamed'
     */
    onInstanceVersion(var0: org_hl7_fhir_instance_model_api_IIdType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IIdTypeInterface> | null): ca_uhn_fhir_rest_gclient_IOperationUnnamed | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationProcessMsg'
     */
    processMessage(): ca_uhn_fhir_rest_gclient_IOperationProcessMsg | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    onInstance(var0: string | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IIdType'
     * @return original return type: 'java.lang.Object'
     */
    onInstance(var0: org_hl7_fhir_instance_model_api_IIdType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IIdTypeInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    onServer(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Object'
     */
    onType(var0: java_lang_Class | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    onType(var0: string | null): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link IOperation} interface.
 * All required methods in {@link IOperationInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIOperationProxy(methods: IOperationInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IOperationInterface>;
declare const IOperation_base: typeof IOperationClass;
/**
 * Class ca.uhn.fhir.rest.gclient.IOperation.
 *
 * This actually imports the java class for further use.
 * The class {@link IOperationClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOperation extends IOperation_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IOperation;
//# sourceMappingURL=IOperation.d.ts.map