import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IPatchWithBody as ca_uhn_fhir_rest_gclient_IPatchWithBody } from "./IPatchWithBody";
import { IBaseParameters as org_hl7_fhir_instance_model_api_IBaseParameters, IBaseParametersInterface as org_hl7_fhir_instance_model_api_IBaseParametersInterface } from "./../../../../../org/hl7/fhir/instance/model/api/IBaseParameters";
/**
 * This class just defines types, you should import {@link IPatch} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IPatchClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IPatchWithBody'
     */
    withBody(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_IPatchWithBody | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IPatchWithBody'
     */
    withBodySync(var0: string | null): ca_uhn_fhir_rest_gclient_IPatchWithBody | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseParameters'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IPatchWithBody'
     */
    withFhirPatch(var0: org_hl7_fhir_instance_model_api_IBaseParameters | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseParametersInterface> | null): Promise<ca_uhn_fhir_rest_gclient_IPatchWithBody | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseParameters'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IPatchWithBody'
     */
    withFhirPatchSync(var0: org_hl7_fhir_instance_model_api_IBaseParameters | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseParametersInterface> | null): ca_uhn_fhir_rest_gclient_IPatchWithBody | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIPatchProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IPatchInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IPatchWithBody'
     */
    withBody(var0: string | null): ca_uhn_fhir_rest_gclient_IPatchWithBody | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseParameters'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IPatchWithBody'
     */
    withFhirPatch(var0: org_hl7_fhir_instance_model_api_IBaseParameters | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseParametersInterface> | null): ca_uhn_fhir_rest_gclient_IPatchWithBody | null;
}
/**
 * Create a proxy for the {@link IPatch} interface.
 * All required methods in {@link IPatchInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIPatchProxy(methods: IPatchInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IPatchInterface>;
declare const IPatch_base: typeof IPatchClass;
/**
 * Class ca.uhn.fhir.rest.gclient.IPatch.
 *
 * This actually imports the java class for further use.
 * The class {@link IPatchClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IPatch extends IPatch_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IPatch;
//# sourceMappingURL=IPatch.d.ts.map