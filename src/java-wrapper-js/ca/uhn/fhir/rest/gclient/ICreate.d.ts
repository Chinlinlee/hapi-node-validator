import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { ICreateTyped as ca_uhn_fhir_rest_gclient_ICreateTyped } from "./ICreateTyped";
import { IBaseResource as org_hl7_fhir_instance_model_api_IBaseResource, IBaseResourceInterface as org_hl7_fhir_instance_model_api_IBaseResourceInterface } from "./../../../../../org/hl7/fhir/instance/model/api/IBaseResource";
/**
 * This class just defines types, you should import {@link ICreate} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ICreateClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseResource'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICreateTyped'
     */
    resource(var0: org_hl7_fhir_instance_model_api_IBaseResource | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseResourceInterface> | null): Promise<ca_uhn_fhir_rest_gclient_ICreateTyped | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseResource'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICreateTyped'
     */
    resourceSync(var0: org_hl7_fhir_instance_model_api_IBaseResource | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseResourceInterface> | null): ca_uhn_fhir_rest_gclient_ICreateTyped | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICreateTyped'
     */
    resource(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_ICreateTyped | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICreateTyped'
     */
    resourceSync(var0: string | null): ca_uhn_fhir_rest_gclient_ICreateTyped | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createICreateProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ICreateInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseResource'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICreateTyped'
     */
    resource(var0: org_hl7_fhir_instance_model_api_IBaseResource | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseResourceInterface> | null): ca_uhn_fhir_rest_gclient_ICreateTyped | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICreateTyped'
     */
    resource(var0: string | null): ca_uhn_fhir_rest_gclient_ICreateTyped | null;
}
/**
 * Create a proxy for the {@link ICreate} interface.
 * All required methods in {@link ICreateInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createICreateProxy(methods: ICreateInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ICreateInterface>;
declare const ICreate_base: typeof ICreateClass;
/**
 * Class ca.uhn.fhir.rest.gclient.ICreate.
 *
 * This actually imports the java class for further use.
 * The class {@link ICreateClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ICreate extends ICreate_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ICreate;
//# sourceMappingURL=ICreate.d.ts.map