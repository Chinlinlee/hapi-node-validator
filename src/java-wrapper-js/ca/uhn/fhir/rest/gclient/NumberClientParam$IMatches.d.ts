import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Long as java_lang_Long } from "./../../../../../java/lang/Long";
/**
 * This class just defines types, you should import {@link NumberClientParam$IMatches} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class NumberClientParam$IMatchesClass extends JavaClass {
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.Object'
     */
    number(var0: java_lang_Long | bigint | number): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.Object'
     */
    numberSync(var0: java_lang_Long | bigint | number): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    number(var0: string | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    numberSync(var0: string | null): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createNumberClientParam$IMatchesProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface NumberClientParam$IMatchesInterface {
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.Object'
     */
    number(var0: java_lang_Long | bigint | number): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    number(var0: string | null): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link NumberClientParam$IMatches} interface.
 * All required methods in {@link NumberClientParam$IMatchesInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createNumberClientParam$IMatchesProxy(methods: NumberClientParam$IMatchesInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<NumberClientParam$IMatchesInterface>;
declare const NumberClientParam$IMatches_base: typeof NumberClientParam$IMatchesClass;
/**
 * Class ca.uhn.fhir.rest.gclient.NumberClientParam$IMatches.
 *
 * This actually imports the java class for further use.
 * The class {@link NumberClientParam$IMatchesClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class NumberClientParam$IMatches extends NumberClientParam$IMatches_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default NumberClientParam$IMatches;
//# sourceMappingURL=NumberClientParam$IMatches.d.ts.map