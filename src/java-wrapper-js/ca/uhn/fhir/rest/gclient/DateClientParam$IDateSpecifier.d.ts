import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { DateClientParam$IDateCriterion as ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion } from "./DateClientParam$IDateCriterion";
import { Date as java_util_Date } from "./../../../../../java/util/Date";
/**
 * This class just defines types, you should import {@link DateClientParam$IDateSpecifier} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DateClientParam$IDateSpecifierClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    second(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    secondSync(var0: string | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    second(var0: java_util_Date | null): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null>;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    secondSync(var0: java_util_Date | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    millis(var0: java_util_Date | null): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null>;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    millisSync(var0: java_util_Date | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    millis(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    millisSync(var0: string | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    day(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    daySync(var0: string | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    day(var0: java_util_Date | null): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null>;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    daySync(var0: java_util_Date | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    now(): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    nowSync(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDateClientParam$IDateSpecifierProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DateClientParam$IDateSpecifierInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    second(var0: string | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    second(var0: java_util_Date | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    millis(var0: java_util_Date | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    millis(var0: string | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    day(var0: string | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    day(var0: java_util_Date | null): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion'
     */
    now(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateCriterion | null;
}
/**
 * Create a proxy for the {@link DateClientParam$IDateSpecifier} interface.
 * All required methods in {@link DateClientParam$IDateSpecifierInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDateClientParam$IDateSpecifierProxy(methods: DateClientParam$IDateSpecifierInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DateClientParam$IDateSpecifierInterface>;
declare const DateClientParam$IDateSpecifier_base: typeof DateClientParam$IDateSpecifierClass;
/**
 * Class ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier.
 *
 * This actually imports the java class for further use.
 * The class {@link DateClientParam$IDateSpecifierClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DateClientParam$IDateSpecifier extends DateClientParam$IDateSpecifier_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DateClientParam$IDateSpecifier;
//# sourceMappingURL=DateClientParam$IDateSpecifier.d.ts.map