import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IOperationProcessMsgMode as ca_uhn_fhir_rest_gclient_IOperationProcessMsgMode } from "./IOperationProcessMsgMode";
import { IBaseBundle as org_hl7_fhir_instance_model_api_IBaseBundle, IBaseBundleInterface as org_hl7_fhir_instance_model_api_IBaseBundleInterface } from "./../../../../../org/hl7/fhir/instance/model/api/IBaseBundle";
/**
 * This class just defines types, you should import {@link IOperationProcessMsg} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOperationProcessMsgClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseBundle'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationProcessMsgMode'
     */
    setMessageBundle(var0: org_hl7_fhir_instance_model_api_IBaseBundle | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseBundleInterface> | null): Promise<ca_uhn_fhir_rest_gclient_IOperationProcessMsgMode | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseBundle'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationProcessMsgMode'
     */
    setMessageBundleSync(var0: org_hl7_fhir_instance_model_api_IBaseBundle | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseBundleInterface> | null): ca_uhn_fhir_rest_gclient_IOperationProcessMsgMode | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationProcessMsg'
     */
    setResponseUrlParam(var0: string | null): Promise<IOperationProcessMsg | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationProcessMsg'
     */
    setResponseUrlParamSync(var0: string | null): IOperationProcessMsg | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIOperationProcessMsgProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IOperationProcessMsgInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseBundle'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationProcessMsgMode'
     */
    setMessageBundle(var0: org_hl7_fhir_instance_model_api_IBaseBundle | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseBundleInterface> | null): ca_uhn_fhir_rest_gclient_IOperationProcessMsgMode | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IOperationProcessMsg'
     */
    setResponseUrlParam(var0: string | null): IOperationProcessMsg | null;
}
/**
 * Create a proxy for the {@link IOperationProcessMsg} interface.
 * All required methods in {@link IOperationProcessMsgInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIOperationProcessMsgProxy(methods: IOperationProcessMsgInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IOperationProcessMsgInterface>;
declare const IOperationProcessMsg_base: typeof IOperationProcessMsgClass;
/**
 * Class ca.uhn.fhir.rest.gclient.IOperationProcessMsg.
 *
 * This actually imports the java class for further use.
 * The class {@link IOperationProcessMsgClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOperationProcessMsg extends IOperationProcessMsg_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IOperationProcessMsg;
//# sourceMappingURL=IOperationProcessMsg.d.ts.map