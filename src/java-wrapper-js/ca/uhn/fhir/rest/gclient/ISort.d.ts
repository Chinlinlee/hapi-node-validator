import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IQuery as ca_uhn_fhir_rest_gclient_IQuery } from "./IQuery";
import { IParam as ca_uhn_fhir_rest_gclient_IParam, IParamInterface as ca_uhn_fhir_rest_gclient_IParamInterface } from "./IParam";
/**
 * This class just defines types, you should import {@link ISort} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ISortClass extends JavaClass {
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.IParam'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    ascending(var0: ca_uhn_fhir_rest_gclient_IParam | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_IParamInterface> | null): Promise<ca_uhn_fhir_rest_gclient_IQuery | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.IParam'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    ascendingSync(var0: ca_uhn_fhir_rest_gclient_IParam | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_IParamInterface> | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    ascending(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_IQuery | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    ascendingSync(var0: string | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    defaultOrder(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_IQuery | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    defaultOrderSync(var0: string | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.IParam'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    defaultOrder(var0: ca_uhn_fhir_rest_gclient_IParam | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_IParamInterface> | null): Promise<ca_uhn_fhir_rest_gclient_IQuery | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.IParam'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    defaultOrderSync(var0: ca_uhn_fhir_rest_gclient_IParam | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_IParamInterface> | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.IParam'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    descending(var0: ca_uhn_fhir_rest_gclient_IParam | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_IParamInterface> | null): Promise<ca_uhn_fhir_rest_gclient_IQuery | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.IParam'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    descendingSync(var0: ca_uhn_fhir_rest_gclient_IParam | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_IParamInterface> | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    descending(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_IQuery | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    descendingSync(var0: string | null): ca_uhn_fhir_rest_gclient_IQuery | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createISortProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ISortInterface {
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.IParam'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    ascending(var0: ca_uhn_fhir_rest_gclient_IParam | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_IParamInterface> | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    ascending(var0: string | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    defaultOrder(var0: string | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.IParam'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    defaultOrder(var0: ca_uhn_fhir_rest_gclient_IParam | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_IParamInterface> | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.IParam'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    descending(var0: ca_uhn_fhir_rest_gclient_IParam | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_IParamInterface> | null): ca_uhn_fhir_rest_gclient_IQuery | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IQuery'
     */
    descending(var0: string | null): ca_uhn_fhir_rest_gclient_IQuery | null;
}
/**
 * Create a proxy for the {@link ISort} interface.
 * All required methods in {@link ISortInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createISortProxy(methods: ISortInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ISortInterface>;
declare const ISort_base: typeof ISortClass;
/**
 * Class ca.uhn.fhir.rest.gclient.ISort.
 *
 * This actually imports the java class for further use.
 * The class {@link ISortClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ISort extends ISort_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ISort;
//# sourceMappingURL=ISort.d.ts.map