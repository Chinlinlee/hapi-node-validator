import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { ICriterion as ca_uhn_fhir_rest_gclient_ICriterion, ICriterionInterface as ca_uhn_fhir_rest_gclient_ICriterionInterface } from "./ICriterion";
import { Boolean as java_lang_Boolean } from "./../../../../../java/lang/Boolean";
import { ICompositeWithLeft as ca_uhn_fhir_rest_gclient_ICompositeWithLeft } from "./ICompositeWithLeft";
import { Long as java_lang_Long } from "./../../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link CompositeClientParam} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CompositeClientParamClass extends JavaClass {
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    isMissing(var0: java_lang_Boolean | boolean): Promise<ca_uhn_fhir_rest_gclient_ICriterion | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     */
    isMissingSync(var0: java_lang_Boolean | boolean): ca_uhn_fhir_rest_gclient_ICriterion | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getParamName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getParamNameSync(): string | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICompositeWithLeft'
     */
    withLeft(var0: ca_uhn_fhir_rest_gclient_ICriterion | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_ICriterionInterface> | null): Promise<ca_uhn_fhir_rest_gclient_ICompositeWithLeft | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.gclient.ICriterion'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ICompositeWithLeft'
     */
    withLeftSync(var0: ca_uhn_fhir_rest_gclient_ICriterion | JavaInterfaceProxy<ca_uhn_fhir_rest_gclient_ICriterionInterface> | null): ca_uhn_fhir_rest_gclient_ICompositeWithLeft | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.CompositeClientParam'
     */
    static newInstanceAsync(var0: string | null): Promise<CompositeClientParam>;
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
}
declare const CompositeClientParam_base: typeof CompositeClientParamClass;
/**
 * Class ca.uhn.fhir.rest.gclient.CompositeClientParam.
 *
 * This actually imports the java class for further use.
 * The class {@link CompositeClientParamClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CompositeClientParam extends CompositeClientParam_base {
}
export default CompositeClientParam;
//# sourceMappingURL=CompositeClientParam.d.ts.map