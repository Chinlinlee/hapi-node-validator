import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { ITransactionTyped as ca_uhn_fhir_rest_gclient_ITransactionTyped } from "./ITransactionTyped";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./../../../../../java/util/List";
import { IBaseBundle as org_hl7_fhir_instance_model_api_IBaseBundle, IBaseBundleInterface as org_hl7_fhir_instance_model_api_IBaseBundleInterface } from "./../../../../../org/hl7/fhir/instance/model/api/IBaseBundle";
/**
 * This class just defines types, you should import {@link ITransaction} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ITransactionClass extends JavaClass {
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ITransactionTyped'
     */
    withResources(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): Promise<ca_uhn_fhir_rest_gclient_ITransactionTyped | null>;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ITransactionTyped'
     */
    withResourcesSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): ca_uhn_fhir_rest_gclient_ITransactionTyped | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseBundle'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ITransactionTyped'
     */
    withBundle(var0: org_hl7_fhir_instance_model_api_IBaseBundle | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseBundleInterface> | null): Promise<ca_uhn_fhir_rest_gclient_ITransactionTyped | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseBundle'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ITransactionTyped'
     */
    withBundleSync(var0: org_hl7_fhir_instance_model_api_IBaseBundle | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseBundleInterface> | null): ca_uhn_fhir_rest_gclient_ITransactionTyped | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ITransactionTyped'
     */
    withBundle(var0: string | null): Promise<ca_uhn_fhir_rest_gclient_ITransactionTyped | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ITransactionTyped'
     */
    withBundleSync(var0: string | null): ca_uhn_fhir_rest_gclient_ITransactionTyped | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createITransactionProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ITransactionInterface {
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ITransactionTyped'
     */
    withResources(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): ca_uhn_fhir_rest_gclient_ITransactionTyped | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseBundle'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ITransactionTyped'
     */
    withBundle(var0: org_hl7_fhir_instance_model_api_IBaseBundle | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseBundleInterface> | null): ca_uhn_fhir_rest_gclient_ITransactionTyped | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.ITransactionTyped'
     */
    withBundle(var0: string | null): ca_uhn_fhir_rest_gclient_ITransactionTyped | null;
}
/**
 * Create a proxy for the {@link ITransaction} interface.
 * All required methods in {@link ITransactionInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createITransactionProxy(methods: ITransactionInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ITransactionInterface>;
declare const ITransaction_base: typeof ITransactionClass;
/**
 * Class ca.uhn.fhir.rest.gclient.ITransaction.
 *
 * This actually imports the java class for further use.
 * The class {@link ITransactionClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ITransaction extends ITransaction_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ITransaction;
//# sourceMappingURL=ITransaction.d.ts.map