import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IClientExecutable as ca_uhn_fhir_rest_gclient_IClientExecutable } from "./IClientExecutable";
import { IBaseMetaType as org_hl7_fhir_instance_model_api_IBaseMetaType, IBaseMetaTypeInterface as org_hl7_fhir_instance_model_api_IBaseMetaTypeInterface } from "./../../../../../org/hl7/fhir/instance/model/api/IBaseMetaType";
/**
 * This class just defines types, you should import {@link IMetaAddOrDeleteSourced} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IMetaAddOrDeleteSourcedClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseMetaType'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IClientExecutable'
     */
    meta(var0: org_hl7_fhir_instance_model_api_IBaseMetaType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseMetaTypeInterface> | null): Promise<ca_uhn_fhir_rest_gclient_IClientExecutable | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseMetaType'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IClientExecutable'
     */
    metaSync(var0: org_hl7_fhir_instance_model_api_IBaseMetaType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseMetaTypeInterface> | null): ca_uhn_fhir_rest_gclient_IClientExecutable | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIMetaAddOrDeleteSourcedProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IMetaAddOrDeleteSourcedInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseMetaType'
     * @return original return type: 'ca.uhn.fhir.rest.gclient.IClientExecutable'
     */
    meta(var0: org_hl7_fhir_instance_model_api_IBaseMetaType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseMetaTypeInterface> | null): ca_uhn_fhir_rest_gclient_IClientExecutable | null;
}
/**
 * Create a proxy for the {@link IMetaAddOrDeleteSourced} interface.
 * All required methods in {@link IMetaAddOrDeleteSourcedInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIMetaAddOrDeleteSourcedProxy(methods: IMetaAddOrDeleteSourcedInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IMetaAddOrDeleteSourcedInterface>;
declare const IMetaAddOrDeleteSourced_base: typeof IMetaAddOrDeleteSourcedClass;
/**
 * Class ca.uhn.fhir.rest.gclient.IMetaAddOrDeleteSourced.
 *
 * This actually imports the java class for further use.
 * The class {@link IMetaAddOrDeleteSourcedClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IMetaAddOrDeleteSourced extends IMetaAddOrDeleteSourced_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IMetaAddOrDeleteSourced;
//# sourceMappingURL=IMetaAddOrDeleteSourced.d.ts.map