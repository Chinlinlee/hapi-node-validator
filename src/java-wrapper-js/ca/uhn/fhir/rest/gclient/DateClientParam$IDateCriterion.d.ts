import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { DateClientParam$IDateSpecifier as ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier } from "./DateClientParam$IDateSpecifier";
/**
 * This class just defines types, you should import {@link DateClientParam$IDateCriterion} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DateClientParam$IDateCriterionClass extends JavaClass {
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orAfter(): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orAfterSync(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orBefore(): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orBeforeSync(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orBeforeOrEquals(): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orBeforeOrEqualsSync(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orExactly(): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orExactlySync(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orAfterOrEquals(): Promise<ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orAfterOrEqualsSync(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDateClientParam$IDateCriterionProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DateClientParam$IDateCriterionInterface {
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orAfter(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orBefore(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orBeforeOrEquals(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orExactly(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.gclient.DateClientParam$IDateSpecifier'
     */
    orAfterOrEquals(): ca_uhn_fhir_rest_gclient_DateClientParam$IDateSpecifier | null;
}
/**
 * Create a proxy for the {@link DateClientParam$IDateCriterion} interface.
 * All required methods in {@link DateClientParam$IDateCriterionInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDateClientParam$IDateCriterionProxy(methods: DateClientParam$IDateCriterionInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DateClientParam$IDateCriterionInterface>;
declare const DateClientParam$IDateCriterion_base: typeof DateClientParam$IDateCriterionClass;
/**
 * Class ca.uhn.fhir.rest.gclient.DateClientParam$IDateCriterion.
 *
 * This actually imports the java class for further use.
 * The class {@link DateClientParam$IDateCriterionClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DateClientParam$IDateCriterion extends DateClientParam$IDateCriterion_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DateClientParam$IDateCriterion;
//# sourceMappingURL=DateClientParam$IDateCriterion.d.ts.map