import { JavaClass, BasicOrJavaType } from "java-bridge";
import { FhirContext as ca_uhn_fhir_context_FhirContext } from "./../../context/FhirContext";
import { IQueryParameterType as ca_uhn_fhir_model_api_IQueryParameterType } from "./../../model/api/IQueryParameterType";
import { Boolean as java_lang_Boolean } from "./../../../../../java/lang/Boolean";
import { Long as java_lang_Long } from "./../../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link BaseParam} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseParamClass extends JavaClass {
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @return original return type: 'java.lang.String'
     */
    getValueAsQueryToken(var0: ca_uhn_fhir_context_FhirContext | null): Promise<string | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @return original return type: 'java.lang.String'
     */
    getValueAsQueryTokenSync(var0: ca_uhn_fhir_context_FhirContext | null): string | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setValueAsQueryToken(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: string | null, var3: string | null): Promise<void>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setValueAsQueryTokenSync(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: string | null, var3: string | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getQueryParameterQualifier(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getQueryParameterQualifierSync(): string | null;
    /**
     * @return original return type: 'java.lang.Boolean'
     */
    getMissing(): Promise<boolean | null>;
    /**
     * @return original return type: 'java.lang.Boolean'
     */
    getMissingSync(): boolean | null;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'ca.uhn.fhir.model.api.IQueryParameterType'
     */
    setMissing(var0: java_lang_Boolean | boolean | null): Promise<ca_uhn_fhir_model_api_IQueryParameterType | null>;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'ca.uhn.fhir.model.api.IQueryParameterType'
     */
    setMissingSync(var0: java_lang_Boolean | boolean | null): ca_uhn_fhir_model_api_IQueryParameterType | null;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'ca.uhn.fhir.rest.param.BaseParam'
     */
    setMissing(var0: java_lang_Boolean | boolean | null): Promise<BaseParam | null>;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'ca.uhn.fhir.rest.param.BaseParam'
     */
    setMissingSync(var0: java_lang_Boolean | boolean | null): BaseParam | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const BaseParam_base: typeof BaseParamClass;
/**
 * Class ca.uhn.fhir.rest.param.BaseParam.
 *
 * This actually imports the java class for further use.
 * The class {@link BaseParamClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseParam extends BaseParam_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BaseParam;
//# sourceMappingURL=BaseParam.d.ts.map