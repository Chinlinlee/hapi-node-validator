import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IHttpResponse as ca_uhn_fhir_rest_client_api_IHttpResponse } from "./IHttpResponse";
import { UrlSourceEnum as ca_uhn_fhir_rest_client_api_UrlSourceEnum } from "./UrlSourceEnum";
import { Map as java_util_Map } from "./../../../../../../java/util/Map";
/**
 * This class just defines types, you should import {@link IHttpRequest} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IHttpRequestClass extends JavaClass {
    /**
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpResponse'
     */
    execute(): Promise<ca_uhn_fhir_rest_client_api_IHttpResponse | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpResponse'
     */
    executeSync(): ca_uhn_fhir_rest_client_api_IHttpResponse | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    addHeader(var0: string | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    addHeaderSync(var0: string | null, var1: string | null): void;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.client.api.UrlSourceEnum'
     */
    getUrlSource(): Promise<ca_uhn_fhir_rest_client_api_UrlSourceEnum | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.client.api.UrlSourceEnum'
     */
    getUrlSourceSync(): ca_uhn_fhir_rest_client_api_UrlSourceEnum | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAllHeaders(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAllHeadersSync(): java_util_Map | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getHttpVerbName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getHttpVerbNameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    removeHeaders(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    removeHeadersSync(var0: string | null): void;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.client.api.UrlSourceEnum'
     * @return original return type: 'void'
     */
    setUrlSource(var0: ca_uhn_fhir_rest_client_api_UrlSourceEnum | null): Promise<void>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.client.api.UrlSourceEnum'
     * @return original return type: 'void'
     */
    setUrlSourceSync(var0: ca_uhn_fhir_rest_client_api_UrlSourceEnum | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRequestBodyFromStream(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRequestBodyFromStreamSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUri(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUriSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setUri(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setUriSync(var0: string | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIHttpRequestProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IHttpRequestInterface {
    /**
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpResponse'
     */
    execute(): ca_uhn_fhir_rest_client_api_IHttpResponse | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    addHeader(var0: string | null, var1: string | null): void;
    /**
     * @return original return type: 'ca.uhn.fhir.rest.client.api.UrlSourceEnum'
     */
    getUrlSource(): ca_uhn_fhir_rest_client_api_UrlSourceEnum | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAllHeaders(): java_util_Map | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getHttpVerbName(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    removeHeaders(var0: string | null): void;
    /**
     * @param var0 original type: 'ca.uhn.fhir.rest.client.api.UrlSourceEnum'
     * @return original return type: 'void'
     */
    setUrlSource(var0: ca_uhn_fhir_rest_client_api_UrlSourceEnum | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getRequestBodyFromStream(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUri(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setUri(var0: string | null): void;
}
/**
 * Create a proxy for the {@link IHttpRequest} interface.
 * All required methods in {@link IHttpRequestInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIHttpRequestProxy(methods: IHttpRequestInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IHttpRequestInterface>;
declare const IHttpRequest_base: typeof IHttpRequestClass;
/**
 * Class ca.uhn.fhir.rest.client.api.IHttpRequest.
 *
 * This actually imports the java class for further use.
 * The class {@link IHttpRequestClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IHttpRequest extends IHttpRequest_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IHttpRequest;
//# sourceMappingURL=IHttpRequest.d.ts.map