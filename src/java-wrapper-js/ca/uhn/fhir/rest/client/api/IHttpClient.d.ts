import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IHttpRequest as ca_uhn_fhir_rest_client_api_IHttpRequest } from "./IHttpRequest";
import { FhirContext as ca_uhn_fhir_context_FhirContext } from "./../../../context/FhirContext";
import { IBaseBinary as org_hl7_fhir_instance_model_api_IBaseBinary, IBaseBinaryInterface as org_hl7_fhir_instance_model_api_IBaseBinaryInterface } from "./../../../../../../org/hl7/fhir/instance/model/api/IBaseBinary";
import { EncodingEnum as ca_uhn_fhir_rest_api_EncodingEnum } from "./../../api/EncodingEnum";
import { Map as java_util_Map, MapInterface as java_util_MapInterface } from "./../../../../../../java/util/Map";
/**
 * This class just defines types, you should import {@link IHttpClient} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IHttpClientClass extends JavaClass {
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'org.hl7.fhir.instance.model.api.IBaseBinary'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createBinaryRequest(var0: ca_uhn_fhir_context_FhirContext | null, var1: org_hl7_fhir_instance_model_api_IBaseBinary | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseBinaryInterface> | null): Promise<ca_uhn_fhir_rest_client_api_IHttpRequest | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'org.hl7.fhir.instance.model.api.IBaseBinary'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createBinaryRequestSync(var0: ca_uhn_fhir_context_FhirContext | null, var1: org_hl7_fhir_instance_model_api_IBaseBinary | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseBinaryInterface> | null): ca_uhn_fhir_rest_client_api_IHttpRequest | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'ca.uhn.fhir.rest.api.EncodingEnum'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createGetRequest(var0: ca_uhn_fhir_context_FhirContext | null, var1: ca_uhn_fhir_rest_api_EncodingEnum | null): Promise<ca_uhn_fhir_rest_client_api_IHttpRequest | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'ca.uhn.fhir.rest.api.EncodingEnum'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createGetRequestSync(var0: ca_uhn_fhir_context_FhirContext | null, var1: ca_uhn_fhir_rest_api_EncodingEnum | null): ca_uhn_fhir_rest_client_api_IHttpRequest | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.util.Map'
     * @param var2 original type: 'ca.uhn.fhir.rest.api.EncodingEnum'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createParamRequest(var0: ca_uhn_fhir_context_FhirContext | null, var1: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null, var2: ca_uhn_fhir_rest_api_EncodingEnum | null): Promise<ca_uhn_fhir_rest_client_api_IHttpRequest | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.util.Map'
     * @param var2 original type: 'ca.uhn.fhir.rest.api.EncodingEnum'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createParamRequestSync(var0: ca_uhn_fhir_context_FhirContext | null, var1: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null, var2: ca_uhn_fhir_rest_api_EncodingEnum | null): ca_uhn_fhir_rest_client_api_IHttpRequest | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'ca.uhn.fhir.rest.api.EncodingEnum'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createByteRequest(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: string | null, var3: ca_uhn_fhir_rest_api_EncodingEnum | null): Promise<ca_uhn_fhir_rest_client_api_IHttpRequest | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'ca.uhn.fhir.rest.api.EncodingEnum'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createByteRequestSync(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: string | null, var3: ca_uhn_fhir_rest_api_EncodingEnum | null): ca_uhn_fhir_rest_client_api_IHttpRequest | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIHttpClientProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IHttpClientInterface {
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'org.hl7.fhir.instance.model.api.IBaseBinary'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createBinaryRequest(var0: ca_uhn_fhir_context_FhirContext | null, var1: org_hl7_fhir_instance_model_api_IBaseBinary | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseBinaryInterface> | null): ca_uhn_fhir_rest_client_api_IHttpRequest | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'ca.uhn.fhir.rest.api.EncodingEnum'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createGetRequest(var0: ca_uhn_fhir_context_FhirContext | null, var1: ca_uhn_fhir_rest_api_EncodingEnum | null): ca_uhn_fhir_rest_client_api_IHttpRequest | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.util.Map'
     * @param var2 original type: 'ca.uhn.fhir.rest.api.EncodingEnum'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createParamRequest(var0: ca_uhn_fhir_context_FhirContext | null, var1: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null, var2: ca_uhn_fhir_rest_api_EncodingEnum | null): ca_uhn_fhir_rest_client_api_IHttpRequest | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'ca.uhn.fhir.rest.api.EncodingEnum'
     * @return original return type: 'ca.uhn.fhir.rest.client.api.IHttpRequest'
     */
    createByteRequest(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: string | null, var3: ca_uhn_fhir_rest_api_EncodingEnum | null): ca_uhn_fhir_rest_client_api_IHttpRequest | null;
}
/**
 * Create a proxy for the {@link IHttpClient} interface.
 * All required methods in {@link IHttpClientInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIHttpClientProxy(methods: IHttpClientInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IHttpClientInterface>;
declare const IHttpClient_base: typeof IHttpClientClass;
/**
 * Class ca.uhn.fhir.rest.client.api.IHttpClient.
 *
 * This actually imports the java class for further use.
 * The class {@link IHttpClientClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IHttpClient extends IHttpClient_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IHttpClient;
//# sourceMappingURL=IHttpClient.d.ts.map