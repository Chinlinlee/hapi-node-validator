import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Reader as java_io_Reader } from "./../../../../../../java/io/Reader";
import { InputStream as java_io_InputStream } from "./../../../../../../java/io/InputStream";
import { StopWatch as ca_uhn_fhir_util_StopWatch } from "./../../../util/StopWatch";
import { List as java_util_List } from "./../../../../../../java/util/List";
import { Map as java_util_Map } from "./../../../../../../java/util/Map";
/**
 * This class just defines types, you should import {@link IHttpResponse} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IHttpResponseClass extends JavaClass {
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'void'
     */
    bufferEntity(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    bufferEntitySync(): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getMimeType(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getMimeTypeSync(): string | null;
    /**
     * @return original return type: 'java.io.Reader'
     */
    createReader(): Promise<java_io_Reader | null>;
    /**
     * @return original return type: 'java.io.Reader'
     */
    createReaderSync(): java_io_Reader | null;
    /**
     * @return original return type: 'java.io.InputStream'
     */
    readEntity(): Promise<java_io_InputStream | null>;
    /**
     * @return original return type: 'java.io.InputStream'
     */
    readEntitySync(): java_io_InputStream | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getStatusInfo(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getStatusInfoSync(): string | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getResponse(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getResponseSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'ca.uhn.fhir.util.StopWatch'
     */
    getRequestStopWatch(): Promise<ca_uhn_fhir_util_StopWatch | null>;
    /**
     * @return original return type: 'ca.uhn.fhir.util.StopWatch'
     */
    getRequestStopWatchSync(): ca_uhn_fhir_util_StopWatch | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.List'
     */
    getHeaders(var0: string | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.List'
     */
    getHeadersSync(var0: string | null): java_util_List | null;
    /**
     * @return original return type: 'int'
     */
    getStatus(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getStatusSync(): number;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAllHeaders(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAllHeadersSync(): java_util_Map | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIHttpResponseProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IHttpResponseInterface {
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'void'
     */
    bufferEntity(): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getMimeType(): string | null;
    /**
     * @return original return type: 'java.io.Reader'
     */
    createReader(): java_io_Reader | null;
    /**
     * @return original return type: 'java.io.InputStream'
     */
    readEntity(): java_io_InputStream | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getStatusInfo(): string | null;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getResponse(): BasicOrJavaType | null;
    /**
     * @return original return type: 'ca.uhn.fhir.util.StopWatch'
     */
    getRequestStopWatch(): ca_uhn_fhir_util_StopWatch | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.List'
     */
    getHeaders(var0: string | null): java_util_List | null;
    /**
     * @return original return type: 'int'
     */
    getStatus(): number;
    /**
     * @return original return type: 'java.util.Map'
     */
    getAllHeaders(): java_util_Map | null;
}
/**
 * Create a proxy for the {@link IHttpResponse} interface.
 * All required methods in {@link IHttpResponseInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIHttpResponseProxy(methods: IHttpResponseInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IHttpResponseInterface>;
declare const IHttpResponse_base: typeof IHttpResponseClass;
/**
 * Class ca.uhn.fhir.rest.client.api.IHttpResponse.
 *
 * This actually imports the java class for further use.
 * The class {@link IHttpResponseClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IHttpResponse extends IHttpResponse_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IHttpResponse;
//# sourceMappingURL=IHttpResponse.d.ts.map