import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Boolean as java_lang_Boolean } from "./../../../../../java/lang/Boolean";
import { FhirContext as ca_uhn_fhir_context_FhirContext } from "./../../context/FhirContext";
/**
 * This class just defines types, you should import {@link IQueryParameterType} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IQueryParameterTypeClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Boolean'
     */
    getMissing(): Promise<boolean | null>;
    /**
     * @return original return type: 'java.lang.Boolean'
     */
    getMissingSync(): boolean | null;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'ca.uhn.fhir.model.api.IQueryParameterType'
     */
    setMissing(var0: java_lang_Boolean | boolean | null): Promise<IQueryParameterType | null>;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'ca.uhn.fhir.model.api.IQueryParameterType'
     */
    setMissingSync(var0: java_lang_Boolean | boolean | null): IQueryParameterType | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @return original return type: 'java.lang.String'
     */
    getValueAsQueryToken(var0: ca_uhn_fhir_context_FhirContext | null): Promise<string | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @return original return type: 'java.lang.String'
     */
    getValueAsQueryTokenSync(var0: ca_uhn_fhir_context_FhirContext | null): string | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setValueAsQueryToken(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: string | null, var3: string | null): Promise<void>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setValueAsQueryTokenSync(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: string | null, var3: string | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getQueryParameterQualifier(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getQueryParameterQualifierSync(): string | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIQueryParameterTypeProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IQueryParameterTypeInterface {
    /**
     * @return original return type: 'java.lang.Boolean'
     */
    getMissing(): boolean | null;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'ca.uhn.fhir.model.api.IQueryParameterType'
     */
    setMissing(var0: java_lang_Boolean | boolean | null): IQueryParameterType | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @return original return type: 'java.lang.String'
     */
    getValueAsQueryToken(var0: ca_uhn_fhir_context_FhirContext | null): string | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setValueAsQueryToken(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: string | null, var3: string | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getQueryParameterQualifier(): string | null;
}
/**
 * Create a proxy for the {@link IQueryParameterType} interface.
 * All required methods in {@link IQueryParameterTypeInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIQueryParameterTypeProxy(methods: IQueryParameterTypeInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IQueryParameterTypeInterface>;
declare const IQueryParameterType_base: typeof IQueryParameterTypeClass;
/**
 * Class ca.uhn.fhir.model.api.IQueryParameterType.
 *
 * This actually imports the java class for further use.
 * The class {@link IQueryParameterTypeClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IQueryParameterType extends IQueryParameterType_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IQueryParameterType;
//# sourceMappingURL=IQueryParameterType.d.ts.map