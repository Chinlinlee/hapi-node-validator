import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Class as java_lang_Class } from "./../../../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link ResourceDef} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ResourceDefClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    name(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    nameSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    profile(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    profileSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    id(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    idSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    annotationType(): Promise<java_lang_Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    annotationTypeSync(): java_lang_Class | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createResourceDefProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ResourceDefInterface {
    /**
     * @return original return type: 'java.lang.String'
     */
    name(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    profile(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    id(): string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    annotationType(): java_lang_Class | null;
}
/**
 * Create a proxy for the {@link ResourceDef} interface.
 * All required methods in {@link ResourceDefInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createResourceDefProxy(methods: ResourceDefInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ResourceDefInterface>;
declare const ResourceDef_base: typeof ResourceDefClass;
/**
 * Class ca.uhn.fhir.model.api.annotation.ResourceDef.
 *
 * This actually imports the java class for further use.
 * The class {@link ResourceDefClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ResourceDef extends ResourceDef_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ResourceDef;
//# sourceMappingURL=ResourceDef.d.ts.map