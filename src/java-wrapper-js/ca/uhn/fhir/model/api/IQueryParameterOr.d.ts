import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { List as java_util_List } from "./../../../../../java/util/List";
import { FhirContext as ca_uhn_fhir_context_FhirContext } from "./../../context/FhirContext";
import { QualifiedParamList as ca_uhn_fhir_rest_api_QualifiedParamList } from "./../../rest/api/QualifiedParamList";
/**
 * This class just defines types, you should import {@link IQueryParameterOr} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IQueryParameterOrClass extends JavaClass {
    /**
     * @return original return type: 'java.util.List'
     */
    getValuesAsQueryTokens(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getValuesAsQueryTokensSync(): java_util_List | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'ca.uhn.fhir.rest.api.QualifiedParamList'
     * @return original return type: 'void'
     */
    setValuesAsQueryTokens(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: ca_uhn_fhir_rest_api_QualifiedParamList | null): Promise<void>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'ca.uhn.fhir.rest.api.QualifiedParamList'
     * @return original return type: 'void'
     */
    setValuesAsQueryTokensSync(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: ca_uhn_fhir_rest_api_QualifiedParamList | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIQueryParameterOrProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IQueryParameterOrInterface {
    /**
     * @return original return type: 'java.util.List'
     */
    getValuesAsQueryTokens(): java_util_List | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'ca.uhn.fhir.rest.api.QualifiedParamList'
     * @return original return type: 'void'
     */
    setValuesAsQueryTokens(var0: ca_uhn_fhir_context_FhirContext | null, var1: string | null, var2: ca_uhn_fhir_rest_api_QualifiedParamList | null): void;
}
/**
 * Create a proxy for the {@link IQueryParameterOr} interface.
 * All required methods in {@link IQueryParameterOrInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIQueryParameterOrProxy(methods: IQueryParameterOrInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IQueryParameterOrInterface>;
declare const IQueryParameterOr_base: typeof IQueryParameterOrClass;
/**
 * Class ca.uhn.fhir.model.api.IQueryParameterOr.
 *
 * This actually imports the java class for further use.
 * The class {@link IQueryParameterOrClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IQueryParameterOr extends IQueryParameterOr_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IQueryParameterOr;
//# sourceMappingURL=IQueryParameterOr.d.ts.map