import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IPointcut as ca_uhn_fhir_interceptor_api_IPointcut, IPointcutInterface as ca_uhn_fhir_interceptor_api_IPointcutInterface } from "./IPointcut";
import { HookParams as ca_uhn_fhir_interceptor_api_HookParams } from "./HookParams";
/**
 * This class just defines types, you should import {@link IAnonymousInterceptor} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IAnonymousInterceptorClass extends JavaClass {
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @param var1 original type: 'ca.uhn.fhir.interceptor.api.HookParams'
     * @return original return type: 'void'
     */
    invoke(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null, var1: ca_uhn_fhir_interceptor_api_HookParams | null): Promise<void>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @param var1 original type: 'ca.uhn.fhir.interceptor.api.HookParams'
     * @return original return type: 'void'
     */
    invokeSync(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null, var1: ca_uhn_fhir_interceptor_api_HookParams | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIAnonymousInterceptorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IAnonymousInterceptorInterface {
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @param var1 original type: 'ca.uhn.fhir.interceptor.api.HookParams'
     * @return original return type: 'void'
     */
    invoke(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null, var1: ca_uhn_fhir_interceptor_api_HookParams | null): void;
}
/**
 * Create a proxy for the {@link IAnonymousInterceptor} interface.
 * All required methods in {@link IAnonymousInterceptorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIAnonymousInterceptorProxy(methods: IAnonymousInterceptorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IAnonymousInterceptorInterface>;
declare const IAnonymousInterceptor_base: typeof IAnonymousInterceptorClass;
/**
 * Class ca.uhn.fhir.interceptor.api.IAnonymousInterceptor.
 *
 * This actually imports the java class for further use.
 * The class {@link IAnonymousInterceptorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IAnonymousInterceptor extends IAnonymousInterceptor_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IAnonymousInterceptor;
//# sourceMappingURL=IAnonymousInterceptor.d.ts.map