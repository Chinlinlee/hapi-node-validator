import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Class as java_lang_Class } from "./../../../../../java/lang/Class";
import { List as java_util_List } from "./../../../../../java/util/List";
import { Throwable as java_lang_Throwable } from "./../../../../../java/lang/Throwable";
/**
 * This class just defines types, you should import {@link IPointcut} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IPointcutClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    name(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    nameSync(): string | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getReturnType(): Promise<java_lang_Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getReturnTypeSync(): java_lang_Class | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getParameterTypes(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getParameterTypesSync(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.Throwable'
     * @return original return type: 'boolean'
     */
    isShouldLogAndSwallowException(var0: java_lang_Throwable | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Throwable'
     * @return original return type: 'boolean'
     */
    isShouldLogAndSwallowExceptionSync(var0: java_lang_Throwable | null): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIPointcutProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IPointcutInterface {
    /**
     * @return original return type: 'java.lang.String'
     */
    name(): string | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getReturnType(): java_lang_Class | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getParameterTypes(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.Throwable'
     * @return original return type: 'boolean'
     */
    isShouldLogAndSwallowException(var0: java_lang_Throwable | null): boolean;
}
/**
 * Create a proxy for the {@link IPointcut} interface.
 * All required methods in {@link IPointcutInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIPointcutProxy(methods: IPointcutInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IPointcutInterface>;
declare const IPointcut_base: typeof IPointcutClass;
/**
 * Class ca.uhn.fhir.interceptor.api.IPointcut.
 *
 * This actually imports the java class for further use.
 * The class {@link IPointcutClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IPointcut extends IPointcut_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IPointcut;
//# sourceMappingURL=IPointcut.d.ts.map