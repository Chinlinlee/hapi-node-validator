import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IPointcut as ca_uhn_fhir_interceptor_api_IPointcut, IPointcutInterface as ca_uhn_fhir_interceptor_api_IPointcutInterface } from "./IPointcut";
import { HookParams as ca_uhn_fhir_interceptor_api_HookParams } from "./HookParams";
/**
 * This class just defines types, you should import {@link IInterceptorBroadcaster} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IInterceptorBroadcasterClass extends JavaClass {
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @param var1 original type: 'ca.uhn.fhir.interceptor.api.HookParams'
     * @return original return type: 'java.lang.Object'
     */
    callHooksAndReturnObject(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null, var1: ca_uhn_fhir_interceptor_api_HookParams | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @param var1 original type: 'ca.uhn.fhir.interceptor.api.HookParams'
     * @return original return type: 'java.lang.Object'
     */
    callHooksAndReturnObjectSync(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null, var1: ca_uhn_fhir_interceptor_api_HookParams | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @return original return type: 'boolean'
     */
    hasHooks(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @return original return type: 'boolean'
     */
    hasHooksSync(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null): boolean;
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @param var1 original type: 'ca.uhn.fhir.interceptor.api.HookParams'
     * @return original return type: 'boolean'
     */
    callHooks(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null, var1: ca_uhn_fhir_interceptor_api_HookParams | null): Promise<boolean>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @param var1 original type: 'ca.uhn.fhir.interceptor.api.HookParams'
     * @return original return type: 'boolean'
     */
    callHooksSync(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null, var1: ca_uhn_fhir_interceptor_api_HookParams | null): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIInterceptorBroadcasterProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IInterceptorBroadcasterInterface {
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @param var1 original type: 'ca.uhn.fhir.interceptor.api.HookParams'
     * @return original return type: 'java.lang.Object'
     */
    callHooksAndReturnObject(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null, var1: ca_uhn_fhir_interceptor_api_HookParams | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @return original return type: 'boolean'
     */
    hasHooks(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null): boolean;
    /**
     * @param var0 original type: 'ca.uhn.fhir.interceptor.api.IPointcut'
     * @param var1 original type: 'ca.uhn.fhir.interceptor.api.HookParams'
     * @return original return type: 'boolean'
     */
    callHooks(var0: ca_uhn_fhir_interceptor_api_IPointcut | JavaInterfaceProxy<ca_uhn_fhir_interceptor_api_IPointcutInterface> | null, var1: ca_uhn_fhir_interceptor_api_HookParams | null): boolean;
}
/**
 * Create a proxy for the {@link IInterceptorBroadcaster} interface.
 * All required methods in {@link IInterceptorBroadcasterInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIInterceptorBroadcasterProxy(methods: IInterceptorBroadcasterInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IInterceptorBroadcasterInterface>;
declare const IInterceptorBroadcaster_base: typeof IInterceptorBroadcasterClass;
/**
 * Class ca.uhn.fhir.interceptor.api.IInterceptorBroadcaster.
 *
 * This actually imports the java class for further use.
 * The class {@link IInterceptorBroadcasterClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IInterceptorBroadcaster extends IInterceptorBroadcaster_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IInterceptorBroadcaster;
//# sourceMappingURL=IInterceptorBroadcaster.d.ts.map