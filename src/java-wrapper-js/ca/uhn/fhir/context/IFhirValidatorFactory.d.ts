import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { FhirValidator as ca_uhn_fhir_validation_FhirValidator } from "./../validation/FhirValidator";
import { FhirContext as ca_uhn_fhir_context_FhirContext } from "./FhirContext";
/**
 * This class just defines types, you should import {@link IFhirValidatorFactory} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IFhirValidatorFactoryClass extends JavaClass {
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @return original return type: 'ca.uhn.fhir.validation.FhirValidator'
     */
    newFhirValidator(var0: ca_uhn_fhir_context_FhirContext | null): Promise<ca_uhn_fhir_validation_FhirValidator | null>;
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @return original return type: 'ca.uhn.fhir.validation.FhirValidator'
     */
    newFhirValidatorSync(var0: ca_uhn_fhir_context_FhirContext | null): ca_uhn_fhir_validation_FhirValidator | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIFhirValidatorFactoryProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IFhirValidatorFactoryInterface {
    /**
     * @param var0 original type: 'ca.uhn.fhir.context.FhirContext'
     * @return original return type: 'ca.uhn.fhir.validation.FhirValidator'
     */
    newFhirValidator(var0: ca_uhn_fhir_context_FhirContext | null): ca_uhn_fhir_validation_FhirValidator | null;
}
/**
 * Create a proxy for the {@link IFhirValidatorFactory} interface.
 * All required methods in {@link IFhirValidatorFactoryInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIFhirValidatorFactoryProxy(methods: IFhirValidatorFactoryInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IFhirValidatorFactoryInterface>;
declare const IFhirValidatorFactory_base: typeof IFhirValidatorFactoryClass;
/**
 * Class ca.uhn.fhir.context.IFhirValidatorFactory.
 *
 * This actually imports the java class for further use.
 * The class {@link IFhirValidatorFactoryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IFhirValidatorFactory extends IFhirValidatorFactory_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IFhirValidatorFactory;
//# sourceMappingURL=IFhirValidatorFactory.d.ts.map