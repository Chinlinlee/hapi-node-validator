import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Optional as java_util_Optional } from "./../../../../java/util/Optional";
import { IBase as org_hl7_fhir_instance_model_api_IBase, IBaseInterface as org_hl7_fhir_instance_model_api_IBaseInterface } from "./../../../../org/hl7/fhir/instance/model/api/IBase";
import { List as java_util_List } from "./../../../../java/util/List";
/**
 * This class just defines types, you should import {@link BaseRuntimeChildDefinition$IAccessor} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseRuntimeChildDefinition$IAccessorClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @return original return type: 'java.util.Optional'
     */
    getFirstValueOrNull(var0: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null): Promise<java_util_Optional | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @return original return type: 'java.util.Optional'
     */
    getFirstValueOrNullSync(var0: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null): java_util_Optional | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @return original return type: 'java.util.List'
     */
    getValues(var0: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @return original return type: 'java.util.List'
     */
    getValuesSync(var0: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null): java_util_List | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBaseRuntimeChildDefinition$IAccessorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BaseRuntimeChildDefinition$IAccessorInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @return original return type: 'java.util.Optional'
     */
    getFirstValueOrNull?(var0: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null): java_util_Optional | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @return original return type: 'java.util.List'
     */
    getValues(var0: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null): java_util_List | null;
}
/**
 * Create a proxy for the {@link BaseRuntimeChildDefinition$IAccessor} interface.
 * All required methods in {@link BaseRuntimeChildDefinition$IAccessorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBaseRuntimeChildDefinition$IAccessorProxy(methods: BaseRuntimeChildDefinition$IAccessorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BaseRuntimeChildDefinition$IAccessorInterface>;
declare const BaseRuntimeChildDefinition$IAccessor_base: typeof BaseRuntimeChildDefinition$IAccessorClass;
/**
 * Class ca.uhn.fhir.context.BaseRuntimeChildDefinition$IAccessor.
 *
 * This actually imports the java class for further use.
 * The class {@link BaseRuntimeChildDefinition$IAccessorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseRuntimeChildDefinition$IAccessor extends BaseRuntimeChildDefinition$IAccessor_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BaseRuntimeChildDefinition$IAccessor;
//# sourceMappingURL=BaseRuntimeChildDefinition$IAccessor.d.ts.map