import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Date as java_util_Date } from "./../../../../java/util/Date";
import { Double as java_lang_Double } from "./../../../../java/lang/Double";
import { Long as java_lang_Long } from "./../../../../java/lang/Long";
import { TimeUnit as java_util_concurrent_TimeUnit } from "./../../../../java/util/concurrent/TimeUnit";
import { Integer as java_lang_Integer } from "./../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link StopWatch} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class StopWatchClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'long'
     */
    getMillis(var0: java_util_Date | null): Promise<number>;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'long'
     */
    getMillisSync(var0: java_util_Date | null): number;
    /**
     * @return original return type: 'long'
     */
    getMillis(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getMillisSync(): number;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    static formatMillis(var0: java_lang_Double | number): Promise<string | null>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    static formatMillisSync(var0: java_lang_Double | number): string | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    static formatMillis(var0: java_lang_Long | bigint | number): Promise<string | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    static formatMillisSync(var0: java_lang_Long | bigint | number): string | null;
    /**
     * @return original return type: 'void'
     */
    endCurrentTask(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    endCurrentTaskSync(): void;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    static formatThroughput(var0: java_lang_Double | number): Promise<string | null>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    static formatThroughputSync(var0: java_lang_Double | number): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'java.lang.String'
     */
    formatThroughput(var0: java_lang_Long | bigint | number, var1: java_util_concurrent_TimeUnit | null): Promise<string | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'java.lang.String'
     */
    formatThroughputSync(var0: java_lang_Long | bigint | number, var1: java_util_concurrent_TimeUnit | null): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'double'
     */
    getThroughput(var0: java_lang_Long | bigint | number, var1: java_util_concurrent_TimeUnit | null): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'double'
     */
    getThroughputSync(var0: java_lang_Long | bigint | number, var1: java_util_concurrent_TimeUnit | null): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'long'
     * @param var2 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'double'
     */
    static getThroughput(var0: java_lang_Long | bigint | number, var1: java_lang_Long | bigint | number, var2: java_util_concurrent_TimeUnit | null): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'long'
     * @param var2 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'double'
     */
    static getThroughputSync(var0: java_lang_Long | bigint | number, var1: java_lang_Long | bigint | number, var2: java_util_concurrent_TimeUnit | null): number;
    /**
     * @return original return type: 'void'
     */
    restart(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    restartSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    startTask(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    startTaskSync(var0: string | null): void;
    /**
     * @return original return type: 'java.util.Date'
     */
    getStartedDate(): Promise<java_util_Date | null>;
    /**
     * @return original return type: 'java.util.Date'
     */
    getStartedDateSync(): java_util_Date | null;
    /**
     * @param var0 original type: 'java.lang.Long'
     * @return original return type: 'void'
     */
    static setNowForUnitTest(var0: java_lang_Long | bigint | number | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Long'
     * @return original return type: 'void'
     */
    static setNowForUnitTestSync(var0: java_lang_Long | bigint | number | null): void;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    static formatEstimatedTimeRemaining(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number): Promise<string | null>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @param var2 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    static formatEstimatedTimeRemainingSync(var0: java_lang_Double | number, var1: java_lang_Double | number, var2: java_lang_Double | number): string | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    getMillisPerOperation(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    getMillisPerOperationSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    getEstimatedTimeRemaining(var0: java_lang_Double | number, var1: java_lang_Double | number): Promise<string | null>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    getEstimatedTimeRemainingSync(var0: java_lang_Double | number, var1: java_lang_Double | number): string | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    formatMillisPerOperation(var0: java_lang_Long | bigint | number): Promise<string | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    formatMillisPerOperationSync(var0: java_lang_Long | bigint | number): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    formatTaskDurations(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    formatTaskDurationsSync(): string | null;
    /**
     * @return original return type: 'long'
     */
    getMillisAndRestart(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getMillisAndRestartSync(): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'ca.uhn.fhir.util.StopWatch'
     */
    static newInstanceAsync(var0: java_lang_Long | bigint | number): Promise<StopWatch>;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'ca.uhn.fhir.util.StopWatch'
     */
    static newInstanceAsync(var0: java_util_Date | null): Promise<StopWatch>;
    /**
     * @return original return type: 'ca.uhn.fhir.util.StopWatch'
     */
    static newInstanceAsync(): Promise<StopWatch>;
    /**
     * @param var0 original type: 'long'
     */
    constructor(var0: java_lang_Long | bigint | number);
    /**
     * @param var0 original type: 'java.util.Date'
     */
    constructor(var0: java_util_Date | null);
    constructor();
}
declare const StopWatch_base: typeof StopWatchClass;
/**
 * Class ca.uhn.fhir.util.StopWatch.
 *
 * This actually imports the java class for further use.
 * The class {@link StopWatchClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class StopWatch extends StopWatch_base {
}
export default StopWatch;
//# sourceMappingURL=StopWatch.d.ts.map