import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IBaseResource as org_hl7_fhir_instance_model_api_IBaseResource, IBaseResourceInterface as org_hl7_fhir_instance_model_api_IBaseResourceInterface } from "./../../../../org/hl7/fhir/instance/model/api/IBaseResource";
import { IBase as org_hl7_fhir_instance_model_api_IBase, IBaseInterface as org_hl7_fhir_instance_model_api_IBaseInterface } from "./../../../../org/hl7/fhir/instance/model/api/IBase";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./../../../../java/util/List";
import { BaseRuntimeChildDefinition as ca_uhn_fhir_context_BaseRuntimeChildDefinition } from "./../context/BaseRuntimeChildDefinition";
import { BaseRuntimeElementDefinition as ca_uhn_fhir_context_BaseRuntimeElementDefinition } from "./../context/BaseRuntimeElementDefinition";
/**
 * This class just defines types, you should import {@link IModelVisitor} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IModelVisitorClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseResource'
     * @param var1 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @param var2 original type: 'java.util.List'
     * @param var3 original type: 'ca.uhn.fhir.context.BaseRuntimeChildDefinition'
     * @param var4 original type: 'ca.uhn.fhir.context.BaseRuntimeElementDefinition'
     * @return original return type: 'void'
     */
    acceptElement(var0: org_hl7_fhir_instance_model_api_IBaseResource | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseResourceInterface> | null, var1: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null, var2: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var3: ca_uhn_fhir_context_BaseRuntimeChildDefinition | null, var4: ca_uhn_fhir_context_BaseRuntimeElementDefinition | null): Promise<void>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseResource'
     * @param var1 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @param var2 original type: 'java.util.List'
     * @param var3 original type: 'ca.uhn.fhir.context.BaseRuntimeChildDefinition'
     * @param var4 original type: 'ca.uhn.fhir.context.BaseRuntimeElementDefinition'
     * @return original return type: 'void'
     */
    acceptElementSync(var0: org_hl7_fhir_instance_model_api_IBaseResource | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseResourceInterface> | null, var1: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null, var2: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var3: ca_uhn_fhir_context_BaseRuntimeChildDefinition | null, var4: ca_uhn_fhir_context_BaseRuntimeElementDefinition | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIModelVisitorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IModelVisitorInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IBaseResource'
     * @param var1 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @param var2 original type: 'java.util.List'
     * @param var3 original type: 'ca.uhn.fhir.context.BaseRuntimeChildDefinition'
     * @param var4 original type: 'ca.uhn.fhir.context.BaseRuntimeElementDefinition'
     * @return original return type: 'void'
     */
    acceptElement(var0: org_hl7_fhir_instance_model_api_IBaseResource | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseResourceInterface> | null, var1: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null, var2: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var3: ca_uhn_fhir_context_BaseRuntimeChildDefinition | null, var4: ca_uhn_fhir_context_BaseRuntimeElementDefinition | null): void;
}
/**
 * Create a proxy for the {@link IModelVisitor} interface.
 * All required methods in {@link IModelVisitorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIModelVisitorProxy(methods: IModelVisitorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IModelVisitorInterface>;
declare const IModelVisitor_base: typeof IModelVisitorClass;
/**
 * Class ca.uhn.fhir.util.IModelVisitor.
 *
 * This actually imports the java class for further use.
 * The class {@link IModelVisitorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IModelVisitor extends IModelVisitor_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IModelVisitor;
//# sourceMappingURL=IModelVisitor.d.ts.map