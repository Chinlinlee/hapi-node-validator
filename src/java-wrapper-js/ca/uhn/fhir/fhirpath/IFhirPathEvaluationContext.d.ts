import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IBase as org_hl7_fhir_instance_model_api_IBase, IBaseInterface as org_hl7_fhir_instance_model_api_IBaseInterface } from "./../../../../org/hl7/fhir/instance/model/api/IBase";
import { IIdType as org_hl7_fhir_instance_model_api_IIdType, IIdTypeInterface as org_hl7_fhir_instance_model_api_IIdTypeInterface } from "./../../../../org/hl7/fhir/instance/model/api/IIdType";
/**
 * This class just defines types, you should import {@link IFhirPathEvaluationContext} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IFhirPathEvaluationContextClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IIdType'
     * @param var1 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @return original return type: 'org.hl7.fhir.instance.model.api.IBase'
     */
    resolveReference(var0: org_hl7_fhir_instance_model_api_IIdType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IIdTypeInterface> | null, var1: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null): Promise<org_hl7_fhir_instance_model_api_IBase | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IIdType'
     * @param var1 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @return original return type: 'org.hl7.fhir.instance.model.api.IBase'
     */
    resolveReferenceSync(var0: org_hl7_fhir_instance_model_api_IIdType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IIdTypeInterface> | null, var1: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null): org_hl7_fhir_instance_model_api_IBase | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIFhirPathEvaluationContextProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IFhirPathEvaluationContextInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.instance.model.api.IIdType'
     * @param var1 original type: 'org.hl7.fhir.instance.model.api.IBase'
     * @return original return type: 'org.hl7.fhir.instance.model.api.IBase'
     */
    resolveReference?(var0: org_hl7_fhir_instance_model_api_IIdType | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IIdTypeInterface> | null, var1: org_hl7_fhir_instance_model_api_IBase | JavaInterfaceProxy<org_hl7_fhir_instance_model_api_IBaseInterface> | null): org_hl7_fhir_instance_model_api_IBase | null;
}
/**
 * Create a proxy for the {@link IFhirPathEvaluationContext} interface.
 * All required methods in {@link IFhirPathEvaluationContextInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIFhirPathEvaluationContextProxy(methods: IFhirPathEvaluationContextInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IFhirPathEvaluationContextInterface>;
declare const IFhirPathEvaluationContext_base: typeof IFhirPathEvaluationContextClass;
/**
 * Class ca.uhn.fhir.fhirpath.IFhirPathEvaluationContext.
 *
 * This actually imports the java class for further use.
 * The class {@link IFhirPathEvaluationContextClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IFhirPathEvaluationContext extends IFhirPathEvaluationContext_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IFhirPathEvaluationContext;
//# sourceMappingURL=IFhirPathEvaluationContext.d.ts.map