/// <reference types="node" />
import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { ByteBuffer as java_nio_ByteBuffer } from "./../../nio/ByteBuffer";
/**
 * This class just defines types, you should import {@link Checksum} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ChecksumClass extends JavaClass {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    update(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    updateSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'void'
     */
    update(var0: java_nio_ByteBuffer | null): Promise<void>;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'void'
     */
    updateSync(var0: java_nio_ByteBuffer | null): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    update(var0: Buffer | null): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    updateSync(var0: Buffer | null): void;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    update(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    updateSync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @return original return type: 'long'
     */
    getValue(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getValueSync(): number;
    /**
     * @return original return type: 'void'
     */
    reset(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    resetSync(): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createChecksumProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ChecksumInterface {
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    update?(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'void'
     */
    update?(var0: java_nio_ByteBuffer | null): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    update?(var0: Buffer | null): void;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    update?(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @return original return type: 'long'
     */
    getValue(): number;
    /**
     * @return original return type: 'void'
     */
    reset(): void;
}
/**
 * Create a proxy for the {@link Checksum} interface.
 * All required methods in {@link ChecksumInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createChecksumProxy(methods: ChecksumInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ChecksumInterface>;
declare const Checksum_base: typeof ChecksumClass;
/**
 * Class java.util.zip.Checksum.
 *
 * This actually imports the java class for further use.
 * The class {@link ChecksumClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Checksum extends Checksum_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Checksum;
//# sourceMappingURL=Checksum.d.ts.map