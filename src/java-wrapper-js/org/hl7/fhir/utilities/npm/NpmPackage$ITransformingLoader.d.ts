/// <reference types="node" />
import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { File as java_io_File } from "./../../../../../java/io/File";
/**
 * This class just defines types, you should import {@link NpmPackage$ITransformingLoader} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class NpmPackage$ITransformingLoaderClass extends JavaClass {
    /**
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'byte[]'
     */
    load(var0: java_io_File | null): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'byte[]'
     */
    loadSync(var0: java_io_File | null): Buffer | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createNpmPackage$ITransformingLoaderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface NpmPackage$ITransformingLoaderInterface {
    /**
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'byte[]'
     */
    load(var0: java_io_File | null): Buffer | null;
}
/**
 * Create a proxy for the {@link NpmPackage$ITransformingLoader} interface.
 * All required methods in {@link NpmPackage$ITransformingLoaderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createNpmPackage$ITransformingLoaderProxy(methods: NpmPackage$ITransformingLoaderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<NpmPackage$ITransformingLoaderInterface>;
declare const NpmPackage$ITransformingLoader_base: typeof NpmPackage$ITransformingLoaderClass;
/**
 * Class org.hl7.fhir.utilities.npm.NpmPackage$ITransformingLoader.
 *
 * This actually imports the java class for further use.
 * The class {@link NpmPackage$ITransformingLoaderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class NpmPackage$ITransformingLoader extends NpmPackage$ITransformingLoader_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default NpmPackage$ITransformingLoader;
//# sourceMappingURL=NpmPackage$ITransformingLoader.d.ts.map