/// <reference types="node" />
import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { JsonObject as org_hl7_fhir_utilities_json_model_JsonObject } from "./../json/model/JsonObject";
import { Map as java_util_Map, MapInterface as java_util_MapInterface } from "./../../../../../java/util/Map";
import { List as java_util_List } from "./../../../../../java/util/List";
import { Long as java_lang_Long } from "./../../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../../java/lang/Class";
import { NpmPackage as org_hl7_fhir_utilities_npm_NpmPackage } from "./NpmPackage";
/**
 * This class just defines types, you should import {@link NpmPackage$NpmPackageFolder} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class NpmPackage$NpmPackageFolderClass extends JavaClass {
    /**
     * @return original return type: 'org.hl7.fhir.utilities.json.model.JsonObject'
     */
    index(): Promise<org_hl7_fhir_utilities_json_model_JsonObject | null>;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.json.model.JsonObject'
     */
    indexSync(): org_hl7_fhir_utilities_json_model_JsonObject | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    getContent(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getContentSync(): java_util_Map | null;
    /**
     * @return original return type: 'java.util.List'
     */
    listFiles(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    listFilesSync(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    hasFile(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    hasFileSync(var0: string | null): boolean;
    /**
     * @return original return type: 'java.util.Map'
     */
    getTypes(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getTypesSync(): java_util_Map | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    removeFile(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    removeFileSync(var0: string | null): void;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.json.model.JsonObject'
     * @param var1 original type: 'java.util.Map'
     * @return original return type: 'boolean'
     */
    readIndex(var0: org_hl7_fhir_utilities_json_model_JsonObject | null, var1: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.json.model.JsonObject'
     * @param var1 original type: 'java.util.Map'
     * @return original return type: 'boolean'
     */
    readIndexSync(var0: org_hl7_fhir_utilities_json_model_JsonObject | null, var1: java_util_Map | JavaInterfaceProxy<java_util_MapInterface> | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFolderName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFolderNameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    fetchFile(var0: string | null): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    fetchFileSync(var0: string | null): Buffer | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    dump(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    dumpSync(): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.npm.NpmPackage'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.utilities.npm.NpmPackage$NpmPackageFolder'
     */
    static newInstanceAsync(var0: org_hl7_fhir_utilities_npm_NpmPackage | null, var1: string | null): Promise<NpmPackage$NpmPackageFolder>;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.npm.NpmPackage'
     * @param var1 original type: 'java.lang.String'
     */
    constructor(var0: org_hl7_fhir_utilities_npm_NpmPackage | null, var1: string | null);
}
declare const NpmPackage$NpmPackageFolder_base: typeof NpmPackage$NpmPackageFolderClass;
/**
 * Class org.hl7.fhir.utilities.npm.NpmPackage$NpmPackageFolder.
 *
 * This actually imports the java class for further use.
 * The class {@link NpmPackage$NpmPackageFolderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class NpmPackage$NpmPackageFolder extends NpmPackage$NpmPackageFolder_base {
}
export default NpmPackage$NpmPackageFolder;
//# sourceMappingURL=NpmPackage$NpmPackageFolder.d.ts.map