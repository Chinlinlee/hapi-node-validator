import { JavaClass, BasicOrJavaType } from "java-bridge";
import { List as java_util_List } from "./../../../../../java/util/List";
import { PackageServer$PackageServerAuthenticationMode as org_hl7_fhir_utilities_npm_PackageServer$PackageServerAuthenticationMode } from "./PackageServer$PackageServerAuthenticationMode";
import { Long as java_lang_Long } from "./../../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link PackageServer} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PackageServerClass extends JavaClass {
    /**
     * Original type: 'java.lang.String'
     */
    static readonly PRIMARY_SERVER: string | null;
    /**
     * Original type: 'java.lang.String'
     */
    static readonly SECONDARY_SERVER: string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'java.util.List'
     */
    static publicServers(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    static publicServersSync(): java_util_List | null;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.npm.PackageServer'
     */
    static secondaryServer(): Promise<PackageServer | null>;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.npm.PackageServer'
     */
    static secondaryServerSync(): PackageServer | null;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.npm.PackageServer'
     */
    static primaryServer(): Promise<PackageServer | null>;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.npm.PackageServer'
     */
    static primaryServerSync(): PackageServer | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUsername(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUsernameSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPassword(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPasswordSync(): string | null;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.npm.PackageServer$PackageServerAuthenticationMode'
     */
    getMode(): Promise<org_hl7_fhir_utilities_npm_PackageServer$PackageServerAuthenticationMode | null>;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.npm.PackageServer$PackageServerAuthenticationMode'
     */
    getModeSync(): org_hl7_fhir_utilities_npm_PackageServer$PackageServerAuthenticationMode | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUrl(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getUrlSync(): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.utilities.npm.PackageServer'
     */
    static newInstanceAsync(var0: string | null): Promise<PackageServer>;
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
}
declare const PackageServer_base: typeof PackageServerClass;
/**
 * Class org.hl7.fhir.utilities.npm.PackageServer.
 *
 * This actually imports the java class for further use.
 * The class {@link PackageServerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PackageServer extends PackageServer_base {
}
export default PackageServer;
//# sourceMappingURL=PackageServer.d.ts.map