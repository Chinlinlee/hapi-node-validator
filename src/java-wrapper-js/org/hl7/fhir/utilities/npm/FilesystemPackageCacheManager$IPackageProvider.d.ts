import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { BasePackageCacheManager$InputStreamWithSrc as org_hl7_fhir_utilities_npm_BasePackageCacheManager$InputStreamWithSrc } from "./BasePackageCacheManager$InputStreamWithSrc";
/**
 * This class just defines types, you should import {@link FilesystemPackageCacheManager$IPackageProvider} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FilesystemPackageCacheManager$IPackageProviderClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    handlesPackage(var0: string | null, var1: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    handlesPackageSync(var0: string | null, var1: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.utilities.npm.BasePackageCacheManager$InputStreamWithSrc'
     */
    provide(var0: string | null, var1: string | null): Promise<org_hl7_fhir_utilities_npm_BasePackageCacheManager$InputStreamWithSrc | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.utilities.npm.BasePackageCacheManager$InputStreamWithSrc'
     */
    provideSync(var0: string | null, var1: string | null): org_hl7_fhir_utilities_npm_BasePackageCacheManager$InputStreamWithSrc | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createFilesystemPackageCacheManager$IPackageProviderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface FilesystemPackageCacheManager$IPackageProviderInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    handlesPackage(var0: string | null, var1: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.utilities.npm.BasePackageCacheManager$InputStreamWithSrc'
     */
    provide(var0: string | null, var1: string | null): org_hl7_fhir_utilities_npm_BasePackageCacheManager$InputStreamWithSrc | null;
}
/**
 * Create a proxy for the {@link FilesystemPackageCacheManager$IPackageProvider} interface.
 * All required methods in {@link FilesystemPackageCacheManager$IPackageProviderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createFilesystemPackageCacheManager$IPackageProviderProxy(methods: FilesystemPackageCacheManager$IPackageProviderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<FilesystemPackageCacheManager$IPackageProviderInterface>;
declare const FilesystemPackageCacheManager$IPackageProvider_base: typeof FilesystemPackageCacheManager$IPackageProviderClass;
/**
 * Class org.hl7.fhir.utilities.npm.FilesystemPackageCacheManager$IPackageProvider.
 *
 * This actually imports the java class for further use.
 * The class {@link FilesystemPackageCacheManager$IPackageProviderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FilesystemPackageCacheManager$IPackageProvider extends FilesystemPackageCacheManager$IPackageProvider_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default FilesystemPackageCacheManager$IPackageProvider;
//# sourceMappingURL=FilesystemPackageCacheManager$IPackageProvider.d.ts.map