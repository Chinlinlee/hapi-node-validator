import { JavaClass, BasicOrJavaType } from "java-bridge";
import { List as java_util_List } from "./../../../../../java/util/List";
import { Boolean as java_lang_Boolean } from "./../../../../../java/lang/Boolean";
import { Long as java_lang_Long } from "./../../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../../java/lang/Class";
import { HierarchicalTableGenerator as org_hl7_fhir_utilities_xhtml_HierarchicalTableGenerator } from "./HierarchicalTableGenerator";
/**
 * This class just defines types, you should import {@link HierarchicalTableGenerator$TableModel} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class HierarchicalTableGenerator$TableModelClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    getId(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getIdSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isActive(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isActiveSync(): boolean;
    /**
     * @return original return type: 'java.util.List'
     */
    getRows(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getRowsSync(): java_util_List | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getTitles(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getTitlesSync(): java_util_List | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDocoRef(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDocoRefSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDocoImg(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDocoImgSync(): string | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setAlternating(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setAlternatingSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setDocoImg(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setDocoImgSync(var0: string | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isAlternating(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isAlternatingSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setDocoRef(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setDocoRefSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setId(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setIdSync(var0: string | null): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.xhtml.HierarchicalTableGenerator'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.utilities.xhtml.HierarchicalTableGenerator$TableModel'
     */
    static newInstanceAsync(var0: org_hl7_fhir_utilities_xhtml_HierarchicalTableGenerator | null, var1: string | null, var2: java_lang_Boolean | boolean): Promise<HierarchicalTableGenerator$TableModel>;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.xhtml.HierarchicalTableGenerator'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     */
    constructor(var0: org_hl7_fhir_utilities_xhtml_HierarchicalTableGenerator | null, var1: string | null, var2: java_lang_Boolean | boolean);
}
declare const HierarchicalTableGenerator$TableModel_base: typeof HierarchicalTableGenerator$TableModelClass;
/**
 * Class org.hl7.fhir.utilities.xhtml.HierarchicalTableGenerator$TableModel.
 *
 * This actually imports the java class for further use.
 * The class {@link HierarchicalTableGenerator$TableModelClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class HierarchicalTableGenerator$TableModel extends HierarchicalTableGenerator$TableModel_base {
}
export default HierarchicalTableGenerator$TableModel;
//# sourceMappingURL=HierarchicalTableGenerator$TableModel.d.ts.map