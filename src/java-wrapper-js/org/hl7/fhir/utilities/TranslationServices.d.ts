import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Map as java_util_Map } from "./../../../../java/util/Map";
import { Set as java_util_Set } from "./../../../../java/util/Set";
import { Date as java_util_Date } from "./../../../../java/util/Date";
import { Float as java_lang_Float } from "./../../../../java/lang/Float";
/**
 * This class just defines types, you should import {@link TranslationServices} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TranslationServicesClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    translate(var0: string | null, var1: string | null, var2: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    translateSync(var0: string | null, var1: string | null, var2: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    translate(var0: string | null, var1: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    translateSync(var0: string | null, var1: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Map'
     */
    translations(var0: string | null): Promise<java_util_Map | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Map'
     */
    translationsSync(var0: string | null): java_util_Map | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Set'
     */
    listTranslations(var0: string | null): Promise<java_util_Set | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Set'
     */
    listTranslationsSync(var0: string | null): java_util_Set | null;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'java.lang.String'
     */
    toStr(var0: java_util_Date | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'java.lang.String'
     */
    toStrSync(var0: java_util_Date | null): string | null;
    /**
     * @param var0 original type: 'float'
     * @return original return type: 'java.lang.String'
     */
    toStr(var0: java_lang_Float | number): Promise<string | null>;
    /**
     * @param var0 original type: 'float'
     * @return original return type: 'java.lang.String'
     */
    toStrSync(var0: java_lang_Float | number): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.String'
     */
    translateAndFormat(var0: string | null, var1: string | null, var2: string | null, var3: (BasicOrJavaType | null)[] | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.String'
     */
    translateAndFormatSync(var0: string | null, var1: string | null, var2: string | null, var3: (BasicOrJavaType | null)[] | null): string | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createTranslationServicesProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface TranslationServicesInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    translate(var0: string | null, var1: string | null, var2: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    translate(var0: string | null, var1: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Map'
     */
    translations(var0: string | null): java_util_Map | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Set'
     */
    listTranslations(var0: string | null): java_util_Set | null;
    /**
     * @param var0 original type: 'java.util.Date'
     * @return original return type: 'java.lang.String'
     */
    toStr(var0: java_util_Date | null): string | null;
    /**
     * @param var0 original type: 'float'
     * @return original return type: 'java.lang.String'
     */
    toStr(var0: java_lang_Float | number): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.String'
     */
    translateAndFormat(var0: string | null, var1: string | null, var2: string | null, var3: (BasicOrJavaType | null)[] | null): string | null;
}
/**
 * Create a proxy for the {@link TranslationServices} interface.
 * All required methods in {@link TranslationServicesInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createTranslationServicesProxy(methods: TranslationServicesInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<TranslationServicesInterface>;
declare const TranslationServices_base: typeof TranslationServicesClass;
/**
 * Class org.hl7.fhir.utilities.TranslationServices.
 *
 * This actually imports the java class for further use.
 * The class {@link TranslationServicesClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class TranslationServices extends TranslationServices_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default TranslationServices;
//# sourceMappingURL=TranslationServices.d.ts.map