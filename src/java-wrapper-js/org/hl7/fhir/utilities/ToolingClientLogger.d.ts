/// <reference types="node" />
import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./../../../../java/util/List";
/**
 * This class just defines types, you should import {@link ToolingClientLogger} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ToolingClientLoggerClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.util.List'
     * @param var3 original type: 'byte[]'
     * @return original return type: 'void'
     */
    logRequest(var0: string | null, var1: string | null, var2: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var3: Buffer | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.util.List'
     * @param var3 original type: 'byte[]'
     * @return original return type: 'void'
     */
    logRequestSync(var0: string | null, var1: string | null, var2: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var3: Buffer | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.List'
     * @param var2 original type: 'byte[]'
     * @return original return type: 'void'
     */
    logResponse(var0: string | null, var1: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var2: Buffer | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.List'
     * @param var2 original type: 'byte[]'
     * @return original return type: 'void'
     */
    logResponseSync(var0: string | null, var1: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var2: Buffer | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLastId(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLastIdSync(): string | null;
    /**
     * @return original return type: 'void'
     */
    clearLastId(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    clearLastIdSync(): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createToolingClientLoggerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ToolingClientLoggerInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.util.List'
     * @param var3 original type: 'byte[]'
     * @return original return type: 'void'
     */
    logRequest(var0: string | null, var1: string | null, var2: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var3: Buffer | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.List'
     * @param var2 original type: 'byte[]'
     * @return original return type: 'void'
     */
    logResponse(var0: string | null, var1: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var2: Buffer | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLastId(): string | null;
    /**
     * @return original return type: 'void'
     */
    clearLastId(): void;
}
/**
 * Create a proxy for the {@link ToolingClientLogger} interface.
 * All required methods in {@link ToolingClientLoggerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createToolingClientLoggerProxy(methods: ToolingClientLoggerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ToolingClientLoggerInterface>;
declare const ToolingClientLogger_base: typeof ToolingClientLoggerClass;
/**
 * Class org.hl7.fhir.utilities.ToolingClientLogger.
 *
 * This actually imports the java class for further use.
 * The class {@link ToolingClientLoggerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ToolingClientLogger extends ToolingClientLogger_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default ToolingClientLogger;
//# sourceMappingURL=ToolingClientLogger.d.ts.map