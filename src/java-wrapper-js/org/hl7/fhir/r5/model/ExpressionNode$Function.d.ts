import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Enum as java_lang_Enum } from "./../../../../../java/lang/Enum";
import { Class as java_lang_Class } from "./../../../../../java/lang/Class";
import { Optional as java_util_Optional } from "./../../../../../java/util/Optional";
import { Long as java_lang_Long } from "./../../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../../java/lang/Integer";
/**
 * This class just defines types, you should import {@link ExpressionNode$Function} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ExpressionNode$FunctionClass extends JavaClass {
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Custom: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Empty: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Not: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Exists: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly SubsetOf: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly SupersetOf: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly IsDistinct: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Distinct: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Count: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Where: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Select: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly All: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Repeat: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Aggregate: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Item: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly As: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Is: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Single: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly First: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Last: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Tail: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Skip: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Take: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Union: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Combine: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Intersect: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Exclude: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Iif: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Upper: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Lower: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ToChars: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly IndexOf: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Substring: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly StartsWith: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly EndsWith: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Matches: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly MatchesFull: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ReplaceMatches: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Contains: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Replace: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Length: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Children: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Descendants: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly MemberOf: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Trace: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Check: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Today: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Now: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Resolve: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Extension: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly AllFalse: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly AnyFalse: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly AllTrue: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly AnyTrue: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly HasValue: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly OfType: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Type: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ConvertsToBoolean: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ConvertsToInteger: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ConvertsToString: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ConvertsToDecimal: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ConvertsToQuantity: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ConvertsToDateTime: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ConvertsToDate: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ConvertsToTime: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ToBoolean: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ToInteger: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ToString: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ToDecimal: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ToQuantity: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ToDateTime: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ToTime: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly ConformsTo: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Round: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Sqrt: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Abs: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Ceiling: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Exp: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Floor: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Ln: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Log: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Power: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Truncate: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Encode: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Decode: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Escape: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Unescape: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Trim: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Split: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Join: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly LowBoundary: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly HighBoundary: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Precision: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly HtmlChecks1: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly HtmlChecks2: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly AliasAs: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Alias: ExpressionNode$FunctionClass | null;
    /**
     * Original type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static readonly Comparable: ExpressionNode$FunctionClass | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.ExpressionNode$Function[]'
     */
    static values(): Promise<(ExpressionNode$Function | null)[] | null>;
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.ExpressionNode$Function[]'
     */
    static valuesSync(): (ExpressionNode$Function | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static valueOf(var0: string | null): Promise<ExpressionNode$Function | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static valueOfSync(var0: string | null): ExpressionNode$Function | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Enum'
     */
    static valueOf(var0: java_lang_Class | null, var1: string | null): Promise<java_lang_Enum | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Enum'
     */
    static valueOfSync(var0: java_lang_Class | null, var1: string | null): java_lang_Enum | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static fromCode(var0: string | null): Promise<ExpressionNode$Function | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.ExpressionNode$Function'
     */
    static fromCodeSync(var0: string | null): ExpressionNode$Function | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toCode(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toCodeSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    name(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    nameSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'int'
     */
    compareTo(var0: java_lang_Enum | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'int'
     */
    compareToSync(var0: java_lang_Enum | null): number;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstable(): Promise<java_util_Optional | null>;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstableSync(): java_util_Optional | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClass(): Promise<java_lang_Class | null>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getDeclaringClassSync(): java_lang_Class | null;
    /**
     * @return original return type: 'int'
     */
    ordinal(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    ordinalSync(): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
}
declare const ExpressionNode$Function_base: typeof ExpressionNode$FunctionClass;
/**
 * Class org.hl7.fhir.r5.model.ExpressionNode$Function.
 *
 * This actually imports the java class for further use.
 * The class {@link ExpressionNode$FunctionClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ExpressionNode$Function extends ExpressionNode$Function_base {
}
export default ExpressionNode$Function;
//# sourceMappingURL=ExpressionNode$Function.d.ts.map