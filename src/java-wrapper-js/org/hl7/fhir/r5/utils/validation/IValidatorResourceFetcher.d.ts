/// <reference types="node" />
import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Locale as java_util_Locale } from "./../../../../../../java/util/Locale";
import { Element as org_hl7_fhir_r5_elementmodel_Element } from "./../../elementmodel/Element";
import { IResourceValidator as org_hl7_fhir_r5_utils_validation_IResourceValidator, IResourceValidatorInterface as org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface } from "./IResourceValidator";
import { CanonicalResource as org_hl7_fhir_r5_model_CanonicalResource } from "./../../model/CanonicalResource";
/**
 * This class just defines types, you should import {@link IValidatorResourceFetcher} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IValidatorResourceFetcherClass extends JavaClass {
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'org.hl7.fhir.r5.utils.validation.IValidatorResourceFetcher'
     */
    setLocale(var0: java_util_Locale | null): Promise<IValidatorResourceFetcher | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'org.hl7.fhir.r5.utils.validation.IValidatorResourceFetcher'
     */
    setLocaleSync(var0: java_util_Locale | null): IValidatorResourceFetcher | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.elementmodel.Element'
     */
    fetch(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: BasicOrJavaType | null, var2: string | null): Promise<org_hl7_fhir_r5_elementmodel_Element | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.elementmodel.Element'
     */
    fetchSync(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: BasicOrJavaType | null, var2: string | null): org_hl7_fhir_r5_elementmodel_Element | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.CanonicalResource'
     */
    fetchCanonicalResource(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: string | null): Promise<org_hl7_fhir_r5_model_CanonicalResource | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.CanonicalResource'
     */
    fetchCanonicalResourceSync(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: string | null): org_hl7_fhir_r5_model_CanonicalResource | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    fetchesCanonicalResource(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    fetchesCanonicalResourceSync(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: string | null): boolean;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @param var4 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    resolveURL(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: BasicOrJavaType | null, var2: string | null, var3: string | null, var4: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @param var4 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    resolveURLSync(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: BasicOrJavaType | null, var2: string | null, var3: string | null, var4: string | null): boolean;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    fetchRaw(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: string | null): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    fetchRawSync(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: string | null): Buffer | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIValidatorResourceFetcherProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IValidatorResourceFetcherInterface {
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'org.hl7.fhir.r5.utils.validation.IValidatorResourceFetcher'
     */
    setLocale(var0: java_util_Locale | null): IValidatorResourceFetcher | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.elementmodel.Element'
     */
    fetch(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: BasicOrJavaType | null, var2: string | null): org_hl7_fhir_r5_elementmodel_Element | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.CanonicalResource'
     */
    fetchCanonicalResource(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: string | null): org_hl7_fhir_r5_model_CanonicalResource | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    fetchesCanonicalResource(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: string | null): boolean;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @param var4 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    resolveURL(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: BasicOrJavaType | null, var2: string | null, var3: string | null, var4: string | null): boolean;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    fetchRaw(var0: org_hl7_fhir_r5_utils_validation_IResourceValidator | JavaInterfaceProxy<org_hl7_fhir_r5_utils_validation_IResourceValidatorInterface> | null, var1: string | null): Buffer | null;
}
/**
 * Create a proxy for the {@link IValidatorResourceFetcher} interface.
 * All required methods in {@link IValidatorResourceFetcherInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIValidatorResourceFetcherProxy(methods: IValidatorResourceFetcherInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IValidatorResourceFetcherInterface>;
declare const IValidatorResourceFetcher_base: typeof IValidatorResourceFetcherClass;
/**
 * Class org.hl7.fhir.r5.utils.validation.IValidatorResourceFetcher.
 *
 * This actually imports the java class for further use.
 * The class {@link IValidatorResourceFetcherClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IValidatorResourceFetcher extends IValidatorResourceFetcher_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IValidatorResourceFetcher;
//# sourceMappingURL=IValidatorResourceFetcher.d.ts.map