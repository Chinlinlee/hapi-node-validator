import { JavaClass, BasicOrJavaType } from "java-bridge";
import { FHIRLexer$FHIRLexerException as org_hl7_fhir_r5_utils_FHIRLexer$FHIRLexerException } from "./FHIRLexer$FHIRLexerException";
import { SourceLocation as org_hl7_fhir_utilities_SourceLocation } from "./../../utilities/SourceLocation";
import { List as java_util_List } from "./../../../../../java/util/List";
import { Boolean as java_lang_Boolean } from "./../../../../../java/lang/Boolean";
import { Long as java_lang_Long } from "./../../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link FHIRLexer} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FHIRLexerClass extends JavaClass {
    /**
     * @return original return type: 'void'
     */
    next(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    nextSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.utils.FHIRLexer$FHIRLexerException'
     */
    error(var0: string | null): Promise<org_hl7_fhir_r5_utils_FHIRLexer$FHIRLexerException | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.utils.FHIRLexer$FHIRLexerException'
     */
    errorSync(var0: string | null): org_hl7_fhir_r5_utils_FHIRLexer$FHIRLexerException | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'org.hl7.fhir.utilities.SourceLocation'
     * @return original return type: 'org.hl7.fhir.r5.utils.FHIRLexer$FHIRLexerException'
     */
    error(var0: string | null, var1: string | null, var2: org_hl7_fhir_utilities_SourceLocation | null): Promise<org_hl7_fhir_r5_utils_FHIRLexer$FHIRLexerException | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'org.hl7.fhir.utilities.SourceLocation'
     * @return original return type: 'org.hl7.fhir.r5.utils.FHIRLexer$FHIRLexerException'
     */
    errorSync(var0: string | null, var1: string | null, var2: org_hl7_fhir_utilities_SourceLocation | null): org_hl7_fhir_r5_utils_FHIRLexer$FHIRLexerException | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSource(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSourceSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    done(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    doneSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    token(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    tokenSync(var0: string | null): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    take(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    takeSync(): string | null;
    /**
     * @return original return type: 'int'
     */
    nextId(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    nextIdSync(): number;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.SourceLocation'
     */
    getCurrentLocation(): Promise<org_hl7_fhir_utilities_SourceLocation | null>;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.SourceLocation'
     */
    getCurrentLocationSync(): org_hl7_fhir_utilities_SourceLocation | null;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'boolean'
     */
    hasToken(var0: (string | null)[] | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String[]'
     * @return original return type: 'boolean'
     */
    hasTokenSync(var0: (string | null)[] | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    hasToken(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    hasTokenSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    processConstant(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    processConstantSync(var0: string | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCurrent(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCurrentSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setCurrent(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    setCurrentSync(var0: string | null): void;
    /**
     * @return original return type: 'boolean'
     */
    hasComments(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasCommentsSync(): boolean;
    /**
     * @return original return type: 'java.util.List'
     */
    getComments(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getCommentsSync(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    tokenWithTrailingComment(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    tokenWithTrailingCommentSync(var0: string | null): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isLiquidMode(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isLiquidModeSync(): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setLiquidMode(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setLiquidModeSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'int'
     */
    getCurrentStart(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getCurrentStartSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isToken(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isTokenSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isFixedName(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isFixedNameSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    readConstant(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    readConstantSync(var0: string | null): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isConstant(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isConstantSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isStringConstant(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isStringConstantSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isOp(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOpSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    readFixedName(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    readFixedNameSync(var0: string | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFirstComment(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getFirstCommentSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    processFixedName(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    processFixedNameSync(var0: string | null): string | null;
    /**
     * @return original return type: 'int'
     */
    takeInt(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    takeIntSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getAllComments(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getAllCommentsSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    skipToken(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    skipTokenSync(var0: string | null): void;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.SourceLocation'
     */
    getCommentLocation(): Promise<org_hl7_fhir_utilities_SourceLocation | null>;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.SourceLocation'
     */
    getCommentLocationSync(): org_hl7_fhir_utilities_SourceLocation | null;
    /**
     * @return original return type: 'java.util.List'
     */
    cloneComments(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    cloneCommentsSync(): java_util_List | null;
    /**
     * @return original return type: 'boolean'
     */
    isMetadataFormat(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isMetadataFormatSync(): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setMetadataFormat(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setMetadataFormatSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @return original return type: 'java.lang.String'
     */
    takeDottedToken(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    takeDottedTokenSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isAllowDoubleQuotes(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isAllowDoubleQuotesSync(): boolean;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.SourceLocation'
     */
    getCurrentStartLocation(): Promise<org_hl7_fhir_utilities_SourceLocation | null>;
    /**
     * @return original return type: 'org.hl7.fhir.utilities.SourceLocation'
     */
    getCurrentStartLocationSync(): org_hl7_fhir_utilities_SourceLocation | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     * @param var3 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.utils.FHIRLexer'
     */
    static newInstanceAsync(var0: string | null, var1: string | null, var2: java_lang_Boolean | boolean, var3: java_lang_Boolean | boolean): Promise<FHIRLexer>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.utils.FHIRLexer'
     */
    static newInstanceAsync(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean): Promise<FHIRLexer>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'org.hl7.fhir.r5.utils.FHIRLexer'
     */
    static newInstanceAsync(var0: string | null, var1: java_lang_Integer | number): Promise<FHIRLexer>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.utils.FHIRLexer'
     */
    static newInstanceAsync(var0: string | null, var1: string | null): Promise<FHIRLexer>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'boolean'
     * @param var3 original type: 'boolean'
     */
    constructor(var0: string | null, var1: string | null, var2: java_lang_Boolean | boolean, var3: java_lang_Boolean | boolean);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     */
    constructor(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     */
    constructor(var0: string | null, var1: java_lang_Integer | number);
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     */
    constructor(var0: string | null, var1: string | null);
}
declare const FHIRLexer_base: typeof FHIRLexerClass;
/**
 * Class org.hl7.fhir.r5.utils.FHIRLexer.
 *
 * This actually imports the java class for further use.
 * The class {@link FHIRLexerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FHIRLexer extends FHIRLexer_base {
}
export default FHIRLexer;
//# sourceMappingURL=FHIRLexer.d.ts.map