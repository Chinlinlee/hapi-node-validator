import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IWorkerContext$ILoggingService$LogCategory as org_hl7_fhir_r5_context_IWorkerContext$ILoggingService$LogCategory } from "./IWorkerContext$ILoggingService$LogCategory";
/**
 * This class just defines types, you should import {@link IWorkerContext$ILoggingService} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IWorkerContext$ILoggingServiceClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    logMessage(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    logMessageSync(var0: string | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isDebugLogging(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isDebugLoggingSync(): boolean;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.context.IWorkerContext$ILoggingService$LogCategory'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    logDebugMessage(var0: org_hl7_fhir_r5_context_IWorkerContext$ILoggingService$LogCategory | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.context.IWorkerContext$ILoggingService$LogCategory'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    logDebugMessageSync(var0: org_hl7_fhir_r5_context_IWorkerContext$ILoggingService$LogCategory | null, var1: string | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIWorkerContext$ILoggingServiceProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IWorkerContext$ILoggingServiceInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    logMessage(var0: string | null): void;
    /**
     * @return original return type: 'boolean'
     */
    isDebugLogging(): boolean;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.context.IWorkerContext$ILoggingService$LogCategory'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    logDebugMessage(var0: org_hl7_fhir_r5_context_IWorkerContext$ILoggingService$LogCategory | null, var1: string | null): void;
}
/**
 * Create a proxy for the {@link IWorkerContext$ILoggingService} interface.
 * All required methods in {@link IWorkerContext$ILoggingServiceInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIWorkerContext$ILoggingServiceProxy(methods: IWorkerContext$ILoggingServiceInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IWorkerContext$ILoggingServiceInterface>;
declare const IWorkerContext$ILoggingService_base: typeof IWorkerContext$ILoggingServiceClass;
/**
 * Class org.hl7.fhir.r5.context.IWorkerContext$ILoggingService.
 *
 * This actually imports the java class for further use.
 * The class {@link IWorkerContext$ILoggingServiceClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IWorkerContext$ILoggingService extends IWorkerContext$ILoggingService_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IWorkerContext$ILoggingService;
//# sourceMappingURL=IWorkerContext$ILoggingService.d.ts.map