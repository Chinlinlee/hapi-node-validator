import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { IResourceValidator as org_hl7_fhir_r5_utils_validation_IResourceValidator } from "./../utils/validation/IResourceValidator";
import { IWorkerContext as org_hl7_fhir_r5_context_IWorkerContext, IWorkerContextInterface as org_hl7_fhir_r5_context_IWorkerContextInterface } from "./IWorkerContext";
import { XVerExtensionManager as org_hl7_fhir_r5_utils_XVerExtensionManager } from "./../utils/XVerExtensionManager";
/**
 * This class just defines types, you should import {@link SimpleWorkerContext$IValidatorFactory} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SimpleWorkerContext$IValidatorFactoryClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.context.IWorkerContext'
     * @return original return type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     */
    makeValidator(var0: org_hl7_fhir_r5_context_IWorkerContext | JavaInterfaceProxy<org_hl7_fhir_r5_context_IWorkerContextInterface> | null): Promise<org_hl7_fhir_r5_utils_validation_IResourceValidator | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.context.IWorkerContext'
     * @return original return type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     */
    makeValidatorSync(var0: org_hl7_fhir_r5_context_IWorkerContext | JavaInterfaceProxy<org_hl7_fhir_r5_context_IWorkerContextInterface> | null): org_hl7_fhir_r5_utils_validation_IResourceValidator | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.context.IWorkerContext'
     * @param var1 original type: 'org.hl7.fhir.r5.utils.XVerExtensionManager'
     * @return original return type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     */
    makeValidator(var0: org_hl7_fhir_r5_context_IWorkerContext | JavaInterfaceProxy<org_hl7_fhir_r5_context_IWorkerContextInterface> | null, var1: org_hl7_fhir_r5_utils_XVerExtensionManager | null): Promise<org_hl7_fhir_r5_utils_validation_IResourceValidator | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.context.IWorkerContext'
     * @param var1 original type: 'org.hl7.fhir.r5.utils.XVerExtensionManager'
     * @return original return type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     */
    makeValidatorSync(var0: org_hl7_fhir_r5_context_IWorkerContext | JavaInterfaceProxy<org_hl7_fhir_r5_context_IWorkerContextInterface> | null, var1: org_hl7_fhir_r5_utils_XVerExtensionManager | null): org_hl7_fhir_r5_utils_validation_IResourceValidator | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createSimpleWorkerContext$IValidatorFactoryProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface SimpleWorkerContext$IValidatorFactoryInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.context.IWorkerContext'
     * @return original return type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     */
    makeValidator(var0: org_hl7_fhir_r5_context_IWorkerContext | JavaInterfaceProxy<org_hl7_fhir_r5_context_IWorkerContextInterface> | null): org_hl7_fhir_r5_utils_validation_IResourceValidator | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.context.IWorkerContext'
     * @param var1 original type: 'org.hl7.fhir.r5.utils.XVerExtensionManager'
     * @return original return type: 'org.hl7.fhir.r5.utils.validation.IResourceValidator'
     */
    makeValidator(var0: org_hl7_fhir_r5_context_IWorkerContext | JavaInterfaceProxy<org_hl7_fhir_r5_context_IWorkerContextInterface> | null, var1: org_hl7_fhir_r5_utils_XVerExtensionManager | null): org_hl7_fhir_r5_utils_validation_IResourceValidator | null;
}
/**
 * Create a proxy for the {@link SimpleWorkerContext$IValidatorFactory} interface.
 * All required methods in {@link SimpleWorkerContext$IValidatorFactoryInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createSimpleWorkerContext$IValidatorFactoryProxy(methods: SimpleWorkerContext$IValidatorFactoryInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<SimpleWorkerContext$IValidatorFactoryInterface>;
declare const SimpleWorkerContext$IValidatorFactory_base: typeof SimpleWorkerContext$IValidatorFactoryClass;
/**
 * Class org.hl7.fhir.r5.context.SimpleWorkerContext$IValidatorFactory.
 *
 * This actually imports the java class for further use.
 * The class {@link SimpleWorkerContext$IValidatorFactoryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SimpleWorkerContext$IValidatorFactory extends SimpleWorkerContext$IValidatorFactory_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default SimpleWorkerContext$IValidatorFactory;
//# sourceMappingURL=SimpleWorkerContext$IValidatorFactory.d.ts.map