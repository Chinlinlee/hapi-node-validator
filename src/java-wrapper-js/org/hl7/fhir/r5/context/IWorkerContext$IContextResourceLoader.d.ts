import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Bundle as org_hl7_fhir_r5_model_Bundle } from "./../model/Bundle";
import { InputStream as java_io_InputStream } from "./../../../../../java/io/InputStream";
import { Boolean as java_lang_Boolean } from "./../../../../../java/lang/Boolean";
import { Resource as org_hl7_fhir_r5_model_Resource } from "./../model/Resource";
import { List as java_util_List } from "./../../../../../java/util/List";
import { NpmPackage as org_hl7_fhir_utilities_npm_NpmPackage } from "./../../utilities/npm/NpmPackage";
import { NpmPackage$PackageResourceInformation as org_hl7_fhir_utilities_npm_NpmPackage$PackageResourceInformation } from "./../../utilities/npm/NpmPackage$PackageResourceInformation";
/**
 * This class just defines types, you should import {@link IWorkerContext$IContextResourceLoader} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IWorkerContext$IContextResourceLoaderClass extends JavaClass {
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.model.Bundle'
     */
    loadBundle(var0: java_io_InputStream | null, var1: java_lang_Boolean | boolean): Promise<org_hl7_fhir_r5_model_Bundle | null>;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.model.Bundle'
     */
    loadBundleSync(var0: java_io_InputStream | null, var1: java_lang_Boolean | boolean): org_hl7_fhir_r5_model_Bundle | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.model.Resource'
     */
    loadResource(var0: java_io_InputStream | null, var1: java_lang_Boolean | boolean): Promise<org_hl7_fhir_r5_model_Resource | null>;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.model.Resource'
     */
    loadResourceSync(var0: java_io_InputStream | null, var1: java_lang_Boolean | boolean): org_hl7_fhir_r5_model_Resource | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getTypes(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getTypesSync(): java_util_List | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.model.Resource'
     * @return original return type: 'java.lang.String'
     */
    getResourcePath(var0: org_hl7_fhir_r5_model_Resource | null): Promise<string | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.model.Resource'
     * @return original return type: 'java.lang.String'
     */
    getResourcePathSync(var0: org_hl7_fhir_r5_model_Resource | null): string | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.npm.NpmPackage'
     * @return original return type: 'org.hl7.fhir.r5.context.IWorkerContext$IContextResourceLoader'
     */
    getNewLoader(var0: org_hl7_fhir_utilities_npm_NpmPackage | null): Promise<IWorkerContext$IContextResourceLoader | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.npm.NpmPackage'
     * @return original return type: 'org.hl7.fhir.r5.context.IWorkerContext$IContextResourceLoader'
     */
    getNewLoaderSync(var0: org_hl7_fhir_utilities_npm_NpmPackage | null): IWorkerContext$IContextResourceLoader | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.npm.NpmPackage'
     * @param var1 original type: 'org.hl7.fhir.utilities.npm.NpmPackage$PackageResourceInformation'
     * @return original return type: 'boolean'
     */
    wantLoad(var0: org_hl7_fhir_utilities_npm_NpmPackage | null, var1: org_hl7_fhir_utilities_npm_NpmPackage$PackageResourceInformation | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.npm.NpmPackage'
     * @param var1 original type: 'org.hl7.fhir.utilities.npm.NpmPackage$PackageResourceInformation'
     * @return original return type: 'boolean'
     */
    wantLoadSync(var0: org_hl7_fhir_utilities_npm_NpmPackage | null, var1: org_hl7_fhir_utilities_npm_NpmPackage$PackageResourceInformation | null): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.context.IWorkerContext$IContextResourceLoader'
     */
    setLoadProfiles(var0: java_lang_Boolean | boolean): Promise<IWorkerContext$IContextResourceLoader | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.context.IWorkerContext$IContextResourceLoader'
     */
    setLoadProfilesSync(var0: java_lang_Boolean | boolean): IWorkerContext$IContextResourceLoader | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getCodeSystems(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getCodeSystemsSync(): java_util_List | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setPatchUrls(var0: java_lang_Boolean | boolean): Promise<void>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setPatchUrlsSync(var0: java_lang_Boolean | boolean): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    patchUrl(var0: string | null, var1: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    patchUrlSync(var0: string | null, var1: string | null): string | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIWorkerContext$IContextResourceLoaderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IWorkerContext$IContextResourceLoaderInterface {
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.model.Bundle'
     */
    loadBundle(var0: java_io_InputStream | null, var1: java_lang_Boolean | boolean): org_hl7_fhir_r5_model_Bundle | null;
    /**
     * @param var0 original type: 'java.io.InputStream'
     * @param var1 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.model.Resource'
     */
    loadResource(var0: java_io_InputStream | null, var1: java_lang_Boolean | boolean): org_hl7_fhir_r5_model_Resource | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getTypes(): java_util_List | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.model.Resource'
     * @return original return type: 'java.lang.String'
     */
    getResourcePath(var0: org_hl7_fhir_r5_model_Resource | null): string | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.npm.NpmPackage'
     * @return original return type: 'org.hl7.fhir.r5.context.IWorkerContext$IContextResourceLoader'
     */
    getNewLoader(var0: org_hl7_fhir_utilities_npm_NpmPackage | null): IWorkerContext$IContextResourceLoader | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.utilities.npm.NpmPackage'
     * @param var1 original type: 'org.hl7.fhir.utilities.npm.NpmPackage$PackageResourceInformation'
     * @return original return type: 'boolean'
     */
    wantLoad(var0: org_hl7_fhir_utilities_npm_NpmPackage | null, var1: org_hl7_fhir_utilities_npm_NpmPackage$PackageResourceInformation | null): boolean;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'org.hl7.fhir.r5.context.IWorkerContext$IContextResourceLoader'
     */
    setLoadProfiles(var0: java_lang_Boolean | boolean): IWorkerContext$IContextResourceLoader | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getCodeSystems(): java_util_List | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    setPatchUrls(var0: java_lang_Boolean | boolean): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    patchUrl(var0: string | null, var1: string | null): string | null;
}
/**
 * Create a proxy for the {@link IWorkerContext$IContextResourceLoader} interface.
 * All required methods in {@link IWorkerContext$IContextResourceLoaderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIWorkerContext$IContextResourceLoaderProxy(methods: IWorkerContext$IContextResourceLoaderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IWorkerContext$IContextResourceLoaderInterface>;
declare const IWorkerContext$IContextResourceLoader_base: typeof IWorkerContext$IContextResourceLoaderClass;
/**
 * Class org.hl7.fhir.r5.context.IWorkerContext$IContextResourceLoader.
 *
 * This actually imports the java class for further use.
 * The class {@link IWorkerContext$IContextResourceLoaderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IWorkerContext$IContextResourceLoader extends IWorkerContext$IContextResourceLoader_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IWorkerContext$IContextResourceLoader;
//# sourceMappingURL=IWorkerContext$IContextResourceLoader.d.ts.map