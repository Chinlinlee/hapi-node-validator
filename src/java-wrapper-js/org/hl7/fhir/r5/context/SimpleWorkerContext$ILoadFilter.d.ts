import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Resource as org_hl7_fhir_r5_model_Resource } from "./../model/Resource";
/**
 * This class just defines types, you should import {@link SimpleWorkerContext$ILoadFilter} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SimpleWorkerContext$ILoadFilterClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.model.Resource'
     * @return original return type: 'boolean'
     */
    isOkToLoad(var0: org_hl7_fhir_r5_model_Resource | null): Promise<boolean>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.model.Resource'
     * @return original return type: 'boolean'
     */
    isOkToLoadSync(var0: org_hl7_fhir_r5_model_Resource | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    isOkToLoad(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    isOkToLoadSync(var0: string | null): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createSimpleWorkerContext$ILoadFilterProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface SimpleWorkerContext$ILoadFilterInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.model.Resource'
     * @return original return type: 'boolean'
     */
    isOkToLoad(var0: org_hl7_fhir_r5_model_Resource | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    isOkToLoad(var0: string | null): boolean;
}
/**
 * Create a proxy for the {@link SimpleWorkerContext$ILoadFilter} interface.
 * All required methods in {@link SimpleWorkerContext$ILoadFilterInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createSimpleWorkerContext$ILoadFilterProxy(methods: SimpleWorkerContext$ILoadFilterInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<SimpleWorkerContext$ILoadFilterInterface>;
declare const SimpleWorkerContext$ILoadFilter_base: typeof SimpleWorkerContext$ILoadFilterClass;
/**
 * Class org.hl7.fhir.r5.context.SimpleWorkerContext$ILoadFilter.
 *
 * This actually imports the java class for further use.
 * The class {@link SimpleWorkerContext$ILoadFilterClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SimpleWorkerContext$ILoadFilter extends SimpleWorkerContext$ILoadFilter_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default SimpleWorkerContext$ILoadFilter;
//# sourceMappingURL=SimpleWorkerContext$ILoadFilter.d.ts.map