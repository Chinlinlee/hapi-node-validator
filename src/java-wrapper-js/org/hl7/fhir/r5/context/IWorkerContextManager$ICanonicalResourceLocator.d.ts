import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link IWorkerContextManager$ICanonicalResourceLocator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IWorkerContextManager$ICanonicalResourceLocatorClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    findResource(var0: BasicOrJavaType | null, var1: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    findResourceSync(var0: BasicOrJavaType | null, var1: string | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIWorkerContextManager$ICanonicalResourceLocatorProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IWorkerContextManager$ICanonicalResourceLocatorInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    findResource(var0: BasicOrJavaType | null, var1: string | null): void;
}
/**
 * Create a proxy for the {@link IWorkerContextManager$ICanonicalResourceLocator} interface.
 * All required methods in {@link IWorkerContextManager$ICanonicalResourceLocatorInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIWorkerContextManager$ICanonicalResourceLocatorProxy(methods: IWorkerContextManager$ICanonicalResourceLocatorInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IWorkerContextManager$ICanonicalResourceLocatorInterface>;
declare const IWorkerContextManager$ICanonicalResourceLocator_base: typeof IWorkerContextManager$ICanonicalResourceLocatorClass;
/**
 * Class org.hl7.fhir.r5.context.IWorkerContextManager$ICanonicalResourceLocator.
 *
 * This actually imports the java class for further use.
 * The class {@link IWorkerContextManager$ICanonicalResourceLocatorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IWorkerContextManager$ICanonicalResourceLocator extends IWorkerContextManager$ICanonicalResourceLocator_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IWorkerContextManager$ICanonicalResourceLocator;
//# sourceMappingURL=IWorkerContextManager$ICanonicalResourceLocator.d.ts.map