import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { ProfileUtilities$ElementDefinitionHolder as org_hl7_fhir_r5_conformance_profile_ProfileUtilities$ElementDefinitionHolder } from "./ProfileUtilities$ElementDefinitionHolder";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./../../../../../../java/util/List";
import { Long as java_lang_Long } from "./../../../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../../../java/lang/Class";
import { Comparator as java_util_Comparator, ComparatorInterface as java_util_ComparatorInterface } from "./../../../../../../java/util/Comparator";
import { Function as java_util_function_Function, FunctionInterface as java_util_function_FunctionInterface } from "./../../../../../../java/util/function/Function";
import { ToIntFunction as java_util_function_ToIntFunction, ToIntFunctionInterface as java_util_function_ToIntFunctionInterface } from "./../../../../../../java/util/function/ToIntFunction";
import { ToLongFunction as java_util_function_ToLongFunction, ToLongFunctionInterface as java_util_function_ToLongFunctionInterface } from "./../../../../../../java/util/function/ToLongFunction";
import { ToDoubleFunction as java_util_function_ToDoubleFunction, ToDoubleFunctionInterface as java_util_function_ToDoubleFunctionInterface } from "./../../../../../../java/util/function/ToDoubleFunction";
import { Boolean as java_lang_Boolean } from "./../../../../../../java/lang/Boolean";
/**
 * This class just defines types, you should import {@link ProfileUtilities$ElementDefinitionComparer} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ProfileUtilities$ElementDefinitionComparerClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compare(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.conformance.profile.ProfileUtilities$ElementDefinitionHolder'
     * @param var1 original type: 'org.hl7.fhir.r5.conformance.profile.ProfileUtilities$ElementDefinitionHolder'
     * @return original return type: 'int'
     */
    compare(var0: org_hl7_fhir_r5_conformance_profile_ProfileUtilities$ElementDefinitionHolder | null, var1: org_hl7_fhir_r5_conformance_profile_ProfileUtilities$ElementDefinitionHolder | null): Promise<number>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.conformance.profile.ProfileUtilities$ElementDefinitionHolder'
     * @param var1 original type: 'org.hl7.fhir.r5.conformance.profile.ProfileUtilities$ElementDefinitionHolder'
     * @return original return type: 'int'
     */
    compareSync(var0: org_hl7_fhir_r5_conformance_profile_ProfileUtilities$ElementDefinitionHolder | null, var1: org_hl7_fhir_r5_conformance_profile_ProfileUtilities$ElementDefinitionHolder | null): number;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'void'
     */
    checkForErrors(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'void'
     */
    checkForErrorsSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparing(var0: java_util_Comparator | JavaInterfaceProxy<java_util_ComparatorInterface> | null): Promise<java_util_Comparator | null>;
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparingSync(var0: java_util_Comparator | JavaInterfaceProxy<java_util_ComparatorInterface> | null): java_util_Comparator | null;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @param var1 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparing(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null, var1: java_util_Comparator | JavaInterfaceProxy<java_util_ComparatorInterface> | null): Promise<java_util_Comparator | null>;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @param var1 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparingSync(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null, var1: java_util_Comparator | JavaInterfaceProxy<java_util_ComparatorInterface> | null): java_util_Comparator | null;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparing(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): Promise<java_util_Comparator | null>;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparingSync(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): java_util_Comparator | null;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    reversed(): Promise<java_util_Comparator | null>;
    /**
     * @return original return type: 'java.util.Comparator'
     */
    reversedSync(): java_util_Comparator | null;
    /**
     * @param var0 original type: 'java.util.function.ToIntFunction'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparingInt(var0: java_util_function_ToIntFunction | JavaInterfaceProxy<java_util_function_ToIntFunctionInterface> | null): Promise<java_util_Comparator | null>;
    /**
     * @param var0 original type: 'java.util.function.ToIntFunction'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparingIntSync(var0: java_util_function_ToIntFunction | JavaInterfaceProxy<java_util_function_ToIntFunctionInterface> | null): java_util_Comparator | null;
    /**
     * @param var0 original type: 'java.util.function.ToLongFunction'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparingLong(var0: java_util_function_ToLongFunction | JavaInterfaceProxy<java_util_function_ToLongFunctionInterface> | null): Promise<java_util_Comparator | null>;
    /**
     * @param var0 original type: 'java.util.function.ToLongFunction'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparingLongSync(var0: java_util_function_ToLongFunction | JavaInterfaceProxy<java_util_function_ToLongFunctionInterface> | null): java_util_Comparator | null;
    /**
     * @param var0 original type: 'java.util.function.ToDoubleFunction'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparingDouble(var0: java_util_function_ToDoubleFunction | JavaInterfaceProxy<java_util_function_ToDoubleFunctionInterface> | null): Promise<java_util_Comparator | null>;
    /**
     * @param var0 original type: 'java.util.function.ToDoubleFunction'
     * @return original return type: 'java.util.Comparator'
     */
    thenComparingDoubleSync(var0: java_util_function_ToDoubleFunction | JavaInterfaceProxy<java_util_function_ToDoubleFunctionInterface> | null): java_util_Comparator | null;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'java.util.List'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'int'
     * @param var4 original type: 'java.lang.String'
     * @param var5 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.conformance.profile.ProfileUtilities$ElementDefinitionComparer'
     */
    static newInstanceAsync(var0: java_lang_Boolean | boolean, var1: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var2: string | null, var3: java_lang_Integer | number, var4: string | null, var5: string | null): Promise<ProfileUtilities$ElementDefinitionComparer>;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'java.util.List'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'int'
     * @param var4 original type: 'java.lang.String'
     * @param var5 original type: 'java.lang.String'
     */
    constructor(var0: java_lang_Boolean | boolean, var1: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null, var2: string | null, var3: java_lang_Integer | number, var4: string | null, var5: string | null);
}
declare const ProfileUtilities$ElementDefinitionComparer_base: typeof ProfileUtilities$ElementDefinitionComparerClass;
/**
 * Class org.hl7.fhir.r5.conformance.profile.ProfileUtilities$ElementDefinitionComparer.
 *
 * This actually imports the java class for further use.
 * The class {@link ProfileUtilities$ElementDefinitionComparerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ProfileUtilities$ElementDefinitionComparer extends ProfileUtilities$ElementDefinitionComparer_base {
}
export default ProfileUtilities$ElementDefinitionComparer;
//# sourceMappingURL=ProfileUtilities$ElementDefinitionComparer.d.ts.map