import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Base as org_hl7_fhir_r5_model_Base } from "./../../model/Base";
import { Element as org_hl7_fhir_r5_elementmodel_Element } from "./../../elementmodel/Element";
/**
 * This class just defines types, you should import {@link RenderingContext$ITypeParser} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RenderingContext$ITypeParserClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    parseType(var0: string | null, var1: string | null): Promise<org_hl7_fhir_r5_model_Base | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    parseTypeSync(var0: string | null, var1: string | null): org_hl7_fhir_r5_model_Base | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.elementmodel.Element'
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    parseType(var0: org_hl7_fhir_r5_elementmodel_Element | null): Promise<org_hl7_fhir_r5_model_Base | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.elementmodel.Element'
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    parseTypeSync(var0: org_hl7_fhir_r5_elementmodel_Element | null): org_hl7_fhir_r5_model_Base | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createRenderingContext$ITypeParserProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface RenderingContext$ITypeParserInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    parseType(var0: string | null, var1: string | null): org_hl7_fhir_r5_model_Base | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.elementmodel.Element'
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    parseType(var0: org_hl7_fhir_r5_elementmodel_Element | null): org_hl7_fhir_r5_model_Base | null;
}
/**
 * Create a proxy for the {@link RenderingContext$ITypeParser} interface.
 * All required methods in {@link RenderingContext$ITypeParserInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createRenderingContext$ITypeParserProxy(methods: RenderingContext$ITypeParserInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<RenderingContext$ITypeParserInterface>;
declare const RenderingContext$ITypeParser_base: typeof RenderingContext$ITypeParserClass;
/**
 * Class org.hl7.fhir.r5.renderers.utils.RenderingContext$ITypeParser.
 *
 * This actually imports the java class for further use.
 * The class {@link RenderingContext$ITypeParserClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class RenderingContext$ITypeParser extends RenderingContext$ITypeParser_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default RenderingContext$ITypeParser;
//# sourceMappingURL=RenderingContext$ITypeParser.d.ts.map