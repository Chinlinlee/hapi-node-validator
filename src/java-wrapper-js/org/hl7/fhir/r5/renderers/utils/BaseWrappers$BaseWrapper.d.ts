import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Base as org_hl7_fhir_r5_model_Base } from "./../../model/Base";
import { BaseWrappers$PropertyWrapper as org_hl7_fhir_r5_renderers_utils_BaseWrappers$PropertyWrapper } from "./BaseWrappers$PropertyWrapper";
import { List as java_util_List } from "./../../../../../../java/util/List";
import { RenderingContext as org_hl7_fhir_r5_renderers_utils_RenderingContext } from "./RenderingContext";
/**
 * This class just defines types, you should import {@link BaseWrappers$BaseWrapper} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseWrappers$BaseWrapperClass extends JavaClass {
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    getBase(): Promise<org_hl7_fhir_r5_model_Base | null>;
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    getBaseSync(): org_hl7_fhir_r5_model_Base | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.BaseWrappers$PropertyWrapper'
     */
    getChildByName(var0: string | null): Promise<org_hl7_fhir_r5_renderers_utils_BaseWrappers$PropertyWrapper | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.BaseWrappers$PropertyWrapper'
     */
    getChildByNameSync(var0: string | null): org_hl7_fhir_r5_renderers_utils_BaseWrappers$PropertyWrapper | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    fhirType(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    fhirTypeSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    get(var0: string | null): Promise<org_hl7_fhir_r5_model_Base | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    getSync(var0: string | null): org_hl7_fhir_r5_model_Base | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    has(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    hasSync(var0: string | null): boolean;
    /**
     * @return original return type: 'java.util.List'
     */
    children(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    childrenSync(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.List'
     */
    children(var0: string | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.List'
     */
    childrenSync(var0: string | null): java_util_List | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     */
    getContext(): Promise<org_hl7_fhir_r5_renderers_utils_RenderingContext | null>;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     */
    getContextSync(): org_hl7_fhir_r5_renderers_utils_RenderingContext | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBaseWrappers$BaseWrapperProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BaseWrappers$BaseWrapperInterface {
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    getBase(): org_hl7_fhir_r5_model_Base | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.BaseWrappers$PropertyWrapper'
     */
    getChildByName(var0: string | null): org_hl7_fhir_r5_renderers_utils_BaseWrappers$PropertyWrapper | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    fhirType(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.model.Base'
     */
    get(var0: string | null): org_hl7_fhir_r5_model_Base | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    has(var0: string | null): boolean;
    /**
     * @return original return type: 'java.util.List'
     */
    children(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.List'
     */
    children(var0: string | null): java_util_List | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     */
    getContext(): org_hl7_fhir_r5_renderers_utils_RenderingContext | null;
}
/**
 * Create a proxy for the {@link BaseWrappers$BaseWrapper} interface.
 * All required methods in {@link BaseWrappers$BaseWrapperInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBaseWrappers$BaseWrapperProxy(methods: BaseWrappers$BaseWrapperInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BaseWrappers$BaseWrapperInterface>;
declare const BaseWrappers$BaseWrapper_base: typeof BaseWrappers$BaseWrapperClass;
/**
 * Class org.hl7.fhir.r5.renderers.utils.BaseWrappers$BaseWrapper.
 *
 * This actually imports the java class for further use.
 * The class {@link BaseWrappers$BaseWrapperClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseWrappers$BaseWrapper extends BaseWrappers$BaseWrapper_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BaseWrappers$BaseWrapper;
//# sourceMappingURL=BaseWrappers$BaseWrapper.d.ts.map