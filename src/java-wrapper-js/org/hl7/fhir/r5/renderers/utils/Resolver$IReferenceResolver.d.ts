import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Resolver$ResourceWithReference as org_hl7_fhir_r5_renderers_utils_Resolver$ResourceWithReference } from "./Resolver$ResourceWithReference";
import { RenderingContext as org_hl7_fhir_r5_renderers_utils_RenderingContext } from "./RenderingContext";
/**
 * This class just defines types, you should import {@link Resolver$IReferenceResolver} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Resolver$IReferenceResolverClass extends JavaClass {
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.Resolver$ResourceWithReference'
     */
    resolve(var0: org_hl7_fhir_r5_renderers_utils_RenderingContext | null, var1: string | null): Promise<org_hl7_fhir_r5_renderers_utils_Resolver$ResourceWithReference | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.Resolver$ResourceWithReference'
     */
    resolveSync(var0: org_hl7_fhir_r5_renderers_utils_RenderingContext | null, var1: string | null): org_hl7_fhir_r5_renderers_utils_Resolver$ResourceWithReference | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @param var4 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    urlForContained(var0: org_hl7_fhir_r5_renderers_utils_RenderingContext | null, var1: string | null, var2: string | null, var3: string | null, var4: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @param var4 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    urlForContainedSync(var0: org_hl7_fhir_r5_renderers_utils_RenderingContext | null, var1: string | null, var2: string | null, var3: string | null, var4: string | null): string | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createResolver$IReferenceResolverProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Resolver$IReferenceResolverInterface {
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.Resolver$ResourceWithReference'
     */
    resolve(var0: org_hl7_fhir_r5_renderers_utils_RenderingContext | null, var1: string | null): org_hl7_fhir_r5_renderers_utils_Resolver$ResourceWithReference | null;
    /**
     * @param var0 original type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'java.lang.String'
     * @param var4 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    urlForContained(var0: org_hl7_fhir_r5_renderers_utils_RenderingContext | null, var1: string | null, var2: string | null, var3: string | null, var4: string | null): string | null;
}
/**
 * Create a proxy for the {@link Resolver$IReferenceResolver} interface.
 * All required methods in {@link Resolver$IReferenceResolverInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createResolver$IReferenceResolverProxy(methods: Resolver$IReferenceResolverInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Resolver$IReferenceResolverInterface>;
declare const Resolver$IReferenceResolver_base: typeof Resolver$IReferenceResolverClass;
/**
 * Class org.hl7.fhir.r5.renderers.utils.Resolver$IReferenceResolver.
 *
 * This actually imports the java class for further use.
 * The class {@link Resolver$IReferenceResolverClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Resolver$IReferenceResolver extends Resolver$IReferenceResolver_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Resolver$IReferenceResolver;
//# sourceMappingURL=Resolver$IReferenceResolver.d.ts.map