import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { BaseWrappers$BaseWrapper as org_hl7_fhir_r5_renderers_utils_BaseWrappers$BaseWrapper } from "./BaseWrappers$BaseWrapper";
import { BaseWrappers$ResourceWrapper as org_hl7_fhir_r5_renderers_utils_BaseWrappers$ResourceWrapper } from "./BaseWrappers$ResourceWrapper";
import { List as java_util_List } from "./../../../../../../java/util/List";
import { StructureDefinition as org_hl7_fhir_r5_model_StructureDefinition } from "./../../model/StructureDefinition";
import { ElementDefinition as org_hl7_fhir_r5_model_ElementDefinition } from "./../../model/ElementDefinition";
import { RenderingContext as org_hl7_fhir_r5_renderers_utils_RenderingContext } from "./RenderingContext";
/**
 * This class just defines types, you should import {@link BaseWrappers$PropertyWrapper} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseWrappers$PropertyWrapperClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    getName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getNameSync(): string | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.BaseWrappers$BaseWrapper'
     */
    value(): Promise<org_hl7_fhir_r5_renderers_utils_BaseWrappers$BaseWrapper | null>;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.BaseWrappers$BaseWrapper'
     */
    valueSync(): org_hl7_fhir_r5_renderers_utils_BaseWrappers$BaseWrapper | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDefinition(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDefinitionSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getTypeCode(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getTypeCodeSync(): string | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.BaseWrappers$ResourceWrapper'
     */
    getAsResource(): Promise<org_hl7_fhir_r5_renderers_utils_BaseWrappers$ResourceWrapper | null>;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.BaseWrappers$ResourceWrapper'
     */
    getAsResourceSync(): org_hl7_fhir_r5_renderers_utils_BaseWrappers$ResourceWrapper | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getValues(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getValuesSync(): java_util_List | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    fhirType(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    fhirTypeSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    hasValues(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasValuesSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    getMinCardinality(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getMinCardinalitySync(): number;
    /**
     * @return original return type: 'int'
     */
    getMaxCardinality(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getMaxCardinalitySync(): number;
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.StructureDefinition'
     */
    getStructure(): Promise<org_hl7_fhir_r5_model_StructureDefinition | null>;
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.StructureDefinition'
     */
    getStructureSync(): org_hl7_fhir_r5_model_StructureDefinition | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.ElementDefinition'
     */
    getElementDefinition(): Promise<org_hl7_fhir_r5_model_ElementDefinition | null>;
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.ElementDefinition'
     */
    getElementDefinitionSync(): org_hl7_fhir_r5_model_ElementDefinition | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     */
    getContext(): Promise<org_hl7_fhir_r5_renderers_utils_RenderingContext | null>;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     */
    getContextSync(): org_hl7_fhir_r5_renderers_utils_RenderingContext | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBaseWrappers$PropertyWrapperProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BaseWrappers$PropertyWrapperInterface {
    /**
     * @return original return type: 'java.lang.String'
     */
    getName(): string | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.BaseWrappers$BaseWrapper'
     */
    value(): org_hl7_fhir_r5_renderers_utils_BaseWrappers$BaseWrapper | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getDefinition(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getTypeCode(): string | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.BaseWrappers$ResourceWrapper'
     */
    getAsResource(): org_hl7_fhir_r5_renderers_utils_BaseWrappers$ResourceWrapper | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getValues(): java_util_List | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    fhirType(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    hasValues(): boolean;
    /**
     * @return original return type: 'int'
     */
    getMinCardinality(): number;
    /**
     * @return original return type: 'int'
     */
    getMaxCardinality(): number;
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.StructureDefinition'
     */
    getStructure(): org_hl7_fhir_r5_model_StructureDefinition | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.model.ElementDefinition'
     */
    getElementDefinition(): org_hl7_fhir_r5_model_ElementDefinition | null;
    /**
     * @return original return type: 'org.hl7.fhir.r5.renderers.utils.RenderingContext'
     */
    getContext(): org_hl7_fhir_r5_renderers_utils_RenderingContext | null;
}
/**
 * Create a proxy for the {@link BaseWrappers$PropertyWrapper} interface.
 * All required methods in {@link BaseWrappers$PropertyWrapperInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBaseWrappers$PropertyWrapperProxy(methods: BaseWrappers$PropertyWrapperInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BaseWrappers$PropertyWrapperInterface>;
declare const BaseWrappers$PropertyWrapper_base: typeof BaseWrappers$PropertyWrapperClass;
/**
 * Class org.hl7.fhir.r5.renderers.utils.BaseWrappers$PropertyWrapper.
 *
 * This actually imports the java class for further use.
 * The class {@link BaseWrappers$PropertyWrapperClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BaseWrappers$PropertyWrapper extends BaseWrappers$PropertyWrapper_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BaseWrappers$PropertyWrapper;
//# sourceMappingURL=BaseWrappers$PropertyWrapper.d.ts.map