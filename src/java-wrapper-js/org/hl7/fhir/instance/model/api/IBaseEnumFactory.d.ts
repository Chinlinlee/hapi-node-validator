import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Enum as java_lang_Enum } from "./../../../../../../java/lang/Enum";
/**
 * This class just defines types, you should import {@link IBaseEnumFactory} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IBaseEnumFactoryClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Enum'
     */
    fromCode(var0: string | null): Promise<java_lang_Enum | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Enum'
     */
    fromCodeSync(var0: string | null): java_lang_Enum | null;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'java.lang.String'
     */
    toCode(var0: java_lang_Enum | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'java.lang.String'
     */
    toCodeSync(var0: java_lang_Enum | null): string | null;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'java.lang.String'
     */
    toSystem(var0: java_lang_Enum | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'java.lang.String'
     */
    toSystemSync(var0: java_lang_Enum | null): string | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIBaseEnumFactoryProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IBaseEnumFactoryInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Enum'
     */
    fromCode(var0: string | null): java_lang_Enum | null;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'java.lang.String'
     */
    toCode(var0: java_lang_Enum | null): string | null;
    /**
     * @param var0 original type: 'java.lang.Enum'
     * @return original return type: 'java.lang.String'
     */
    toSystem?(var0: java_lang_Enum | null): string | null;
}
/**
 * Create a proxy for the {@link IBaseEnumFactory} interface.
 * All required methods in {@link IBaseEnumFactoryInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIBaseEnumFactoryProxy(methods: IBaseEnumFactoryInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IBaseEnumFactoryInterface>;
declare const IBaseEnumFactory_base: typeof IBaseEnumFactoryClass;
/**
 * Class org.hl7.fhir.instance.model.api.IBaseEnumFactory.
 *
 * This actually imports the java class for further use.
 * The class {@link IBaseEnumFactoryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IBaseEnumFactory extends IBaseEnumFactory_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IBaseEnumFactory;
//# sourceMappingURL=IBaseEnumFactory.d.ts.map