import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link IOConsumer} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOConsumerClass extends JavaClass {
    /**
     * Original type: 'org.apache.commons.io.function.IOConsumer'
     */
    static readonly NOOP_IO_CONSUMER: IOConsumerClass | JavaInterfaceProxy<IOConsumerInterface> | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    accept(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    acceptSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.apache.commons.io.function.IOConsumer'
     * @return original return type: 'org.apache.commons.io.function.IOConsumer'
     */
    andThen(var0: IOConsumerClass | JavaInterfaceProxy<IOConsumerInterface> | null): Promise<IOConsumer | null>;
    /**
     * @param var0 original type: 'org.apache.commons.io.function.IOConsumer'
     * @return original return type: 'org.apache.commons.io.function.IOConsumer'
     */
    andThenSync(var0: IOConsumerClass | JavaInterfaceProxy<IOConsumerInterface> | null): IOConsumer | null;
    /**
     * @return original return type: 'org.apache.commons.io.function.IOConsumer'
     */
    static noop(): Promise<IOConsumer | null>;
    /**
     * @return original return type: 'org.apache.commons.io.function.IOConsumer'
     */
    static noopSync(): IOConsumer | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIOConsumerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IOConsumerInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    accept(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.apache.commons.io.function.IOConsumer'
     * @return original return type: 'org.apache.commons.io.function.IOConsumer'
     */
    andThen?(var0: IOConsumerClass | JavaInterfaceProxy<IOConsumerInterface> | null): IOConsumer | null;
}
/**
 * Create a proxy for the {@link IOConsumer} interface.
 * All required methods in {@link IOConsumerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIOConsumerProxy(methods: IOConsumerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IOConsumerInterface>;
declare const IOConsumer_base: typeof IOConsumerClass;
/**
 * Class org.apache.commons.io.function.IOConsumer.
 *
 * This actually imports the java class for further use.
 * The class {@link IOConsumerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOConsumer extends IOConsumer_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IOConsumer;
//# sourceMappingURL=IOConsumer.d.ts.map