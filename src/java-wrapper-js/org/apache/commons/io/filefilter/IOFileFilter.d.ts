import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { File as java_io_File } from "./../../../../../java/io/File";
import { FileVisitResult as java_nio_file_FileVisitResult } from "./../../../../../java/nio/file/FileVisitResult";
import { Path as java_nio_file_Path, PathInterface as java_nio_file_PathInterface } from "./../../../../../java/nio/file/Path";
import { BasicFileAttributes as java_nio_file_attribute_BasicFileAttributes, BasicFileAttributesInterface as java_nio_file_attribute_BasicFileAttributesInterface } from "./../../../../../java/nio/file/attribute/BasicFileAttributes";
/**
 * This class just defines types, you should import {@link IOFileFilter} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOFileFilterClass extends JavaClass {
    /**
     * Original type: 'java.lang.String[]'
     */
    static readonly EMPTY_STRING_ARRAY: (string | null)[] | null;
    /**
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'boolean'
     */
    accept(var0: java_io_File | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'boolean'
     */
    acceptSync(var0: java_io_File | null): boolean;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.attribute.BasicFileAttributes'
     * @return original return type: 'java.nio.file.FileVisitResult'
     */
    accept(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_attribute_BasicFileAttributes | JavaInterfaceProxy<java_nio_file_attribute_BasicFileAttributesInterface> | null): Promise<java_nio_file_FileVisitResult | null>;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.attribute.BasicFileAttributes'
     * @return original return type: 'java.nio.file.FileVisitResult'
     */
    acceptSync(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_attribute_BasicFileAttributes | JavaInterfaceProxy<java_nio_file_attribute_BasicFileAttributesInterface> | null): java_nio_file_FileVisitResult | null;
    /**
     * @param var0 original type: 'java.io.File'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    accept(var0: java_io_File | null, var1: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.io.File'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    acceptSync(var0: java_io_File | null, var1: string | null): boolean;
    /**
     * @param var0 original type: 'org.apache.commons.io.filefilter.IOFileFilter'
     * @return original return type: 'org.apache.commons.io.filefilter.IOFileFilter'
     */
    or(var0: IOFileFilterClass | JavaInterfaceProxy<IOFileFilterInterface> | null): Promise<IOFileFilter | null>;
    /**
     * @param var0 original type: 'org.apache.commons.io.filefilter.IOFileFilter'
     * @return original return type: 'org.apache.commons.io.filefilter.IOFileFilter'
     */
    orSync(var0: IOFileFilterClass | JavaInterfaceProxy<IOFileFilterInterface> | null): IOFileFilter | null;
    /**
     * @return original return type: 'org.apache.commons.io.filefilter.IOFileFilter'
     */
    negate(): Promise<IOFileFilter | null>;
    /**
     * @return original return type: 'org.apache.commons.io.filefilter.IOFileFilter'
     */
    negateSync(): IOFileFilter | null;
    /**
     * @param var0 original type: 'org.apache.commons.io.filefilter.IOFileFilter'
     * @return original return type: 'org.apache.commons.io.filefilter.IOFileFilter'
     */
    and(var0: IOFileFilterClass | JavaInterfaceProxy<IOFileFilterInterface> | null): Promise<IOFileFilter | null>;
    /**
     * @param var0 original type: 'org.apache.commons.io.filefilter.IOFileFilter'
     * @return original return type: 'org.apache.commons.io.filefilter.IOFileFilter'
     */
    andSync(var0: IOFileFilterClass | JavaInterfaceProxy<IOFileFilterInterface> | null): IOFileFilter | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIOFileFilterProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IOFileFilterInterface {
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.io.File'
     * @return original return type: 'boolean'
     */
    accept?(var0: java_io_File | null): boolean;
    /**
     * @param var0 original type: 'java.nio.file.Path'
     * @param var1 original type: 'java.nio.file.attribute.BasicFileAttributes'
     * @return original return type: 'java.nio.file.FileVisitResult'
     */
    accept?(var0: java_nio_file_Path | JavaInterfaceProxy<java_nio_file_PathInterface> | null, var1: java_nio_file_attribute_BasicFileAttributes | JavaInterfaceProxy<java_nio_file_attribute_BasicFileAttributesInterface> | null): java_nio_file_FileVisitResult | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.io.File'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    accept?(var0: java_io_File | null, var1: string | null): boolean;
    /**
     * @param var0 original type: 'org.apache.commons.io.filefilter.IOFileFilter'
     * @return original return type: 'org.apache.commons.io.filefilter.IOFileFilter'
     */
    or?(var0: IOFileFilterClass | JavaInterfaceProxy<IOFileFilterInterface> | null): IOFileFilter | null;
    /**
     * @return original return type: 'org.apache.commons.io.filefilter.IOFileFilter'
     */
    negate?(): IOFileFilter | null;
    /**
     * @param var0 original type: 'org.apache.commons.io.filefilter.IOFileFilter'
     * @return original return type: 'org.apache.commons.io.filefilter.IOFileFilter'
     */
    and?(var0: IOFileFilterClass | JavaInterfaceProxy<IOFileFilterInterface> | null): IOFileFilter | null;
}
/**
 * Create a proxy for the {@link IOFileFilter} interface.
 * All required methods in {@link IOFileFilterInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIOFileFilterProxy(methods: IOFileFilterInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IOFileFilterInterface>;
declare const IOFileFilter_base: typeof IOFileFilterClass;
/**
 * Class org.apache.commons.io.filefilter.IOFileFilter.
 *
 * This actually imports the java class for further use.
 * The class {@link IOFileFilterClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IOFileFilter extends IOFileFilter_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IOFileFilter;
//# sourceMappingURL=IOFileFilter.d.ts.map