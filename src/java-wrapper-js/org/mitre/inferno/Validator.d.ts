/// <reference types="node" />
import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { OperationOutcome as org_hl7_fhir_r5_model_OperationOutcome } from "./../../hl7/fhir/r5/model/OperationOutcome";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./../../../java/util/List";
import { Map as java_util_Map } from "./../../../java/util/Map";
import { IgResponse as org_mitre_inferno_rest_IgResponse } from "./rest/IgResponse";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
/**
 * This class just defines types, you should import {@link Validator} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ValidatorClass extends JavaClass {
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'java.util.List'
     * @return original return type: 'org.hl7.fhir.r5.model.OperationOutcome'
     */
    validate(var0: Buffer | null, var1: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): Promise<org_hl7_fhir_r5_model_OperationOutcome | null>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'java.util.List'
     * @return original return type: 'org.hl7.fhir.r5.model.OperationOutcome'
     */
    validateSync(var0: Buffer | null, var1: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): org_hl7_fhir_r5_model_OperationOutcome | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getResources(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getResourcesSync(): java_util_List | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getVersion(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getVersionSync(): string | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    getKnownIGs(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getKnownIGsSync(): java_util_Map | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getStructures(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getStructuresSync(): java_util_List | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    getProfilesByIg(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    getProfilesByIgSync(): java_util_Map | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.mitre.inferno.rest.IgResponse'
     */
    loadIg(var0: string | null, var1: string | null): Promise<org_mitre_inferno_rest_IgResponse | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'org.mitre.inferno.rest.IgResponse'
     */
    loadIgSync(var0: string | null, var1: string | null): org_mitre_inferno_rest_IgResponse | null;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'org.mitre.inferno.rest.IgResponse'
     */
    loadPackage(var0: Buffer | null): Promise<org_mitre_inferno_rest_IgResponse | null>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'org.mitre.inferno.rest.IgResponse'
     */
    loadPackageSync(var0: Buffer | null): org_mitre_inferno_rest_IgResponse | null;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    loadProfile(var0: Buffer | null): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    loadProfileSync(var0: Buffer | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    loadProfileFromFile(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    loadProfileFromFileSync(var0: string | null): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.mitre.inferno.Validator'
     */
    static newInstanceAsync(var0: string | null): Promise<Validator>;
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
}
declare const Validator_base: typeof ValidatorClass;
/**
 * Class org.mitre.inferno.Validator.
 *
 * This actually imports the java class for further use.
 * The class {@link ValidatorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Validator extends Validator_base {
}
export default Validator;
//# sourceMappingURL=Validator.d.ts.map