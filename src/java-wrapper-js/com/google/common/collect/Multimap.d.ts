import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Collection as java_util_Collection } from "./../../../../java/util/Collection";
import { Iterable as java_lang_Iterable, IterableInterface as java_lang_IterableInterface } from "./../../../../java/lang/Iterable";
import { BiConsumer as java_util_function_BiConsumer, BiConsumerInterface as java_util_function_BiConsumerInterface } from "./../../../../java/util/function/BiConsumer";
import { Multiset as com_google_common_collect_Multiset } from "./Multiset";
import { Set as java_util_Set } from "./../../../../java/util/Set";
import { Map as java_util_Map } from "./../../../../java/util/Map";
/**
 * This class just defines types, you should import {@link Multimap} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MultimapClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    remove(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    removeSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.Collection'
     */
    get(var0: BasicOrJavaType | null): Promise<java_util_Collection | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.Collection'
     */
    getSync(var0: BasicOrJavaType | null): java_util_Collection | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    put(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    putSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.util.Collection'
     */
    values(): Promise<java_util_Collection | null>;
    /**
     * @return original return type: 'java.util.Collection'
     */
    valuesSync(): java_util_Collection | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'void'
     */
    clear(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    clearSync(): void;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEmptySync(): boolean;
    /**
     * @return original return type: 'int'
     */
    size(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    sizeSync(): number;
    /**
     * @param var0 original type: 'com.google.common.collect.Multimap'
     * @return original return type: 'boolean'
     */
    putAll(var0: MultimapClass | JavaInterfaceProxy<MultimapInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'com.google.common.collect.Multimap'
     * @return original return type: 'boolean'
     */
    putAllSync(var0: MultimapClass | JavaInterfaceProxy<MultimapInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Iterable'
     * @return original return type: 'boolean'
     */
    putAll(var0: BasicOrJavaType | null, var1: java_lang_Iterable | JavaInterfaceProxy<java_lang_IterableInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Iterable'
     * @return original return type: 'boolean'
     */
    putAllSync(var0: BasicOrJavaType | null, var1: java_lang_Iterable | JavaInterfaceProxy<java_lang_IterableInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    forEach(var0: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    forEachSync(var0: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsKey(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsKeySync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'com.google.common.collect.Multiset'
     */
    keys(): Promise<com_google_common_collect_Multiset | null>;
    /**
     * @return original return type: 'com.google.common.collect.Multiset'
     */
    keysSync(): com_google_common_collect_Multiset | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    keySet(): Promise<java_util_Set | null>;
    /**
     * @return original return type: 'java.util.Set'
     */
    keySetSync(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsValue(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsValueSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.util.Collection'
     */
    entries(): Promise<java_util_Collection | null>;
    /**
     * @return original return type: 'java.util.Collection'
     */
    entriesSync(): java_util_Collection | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.Collection'
     */
    removeAll(var0: BasicOrJavaType | null): Promise<java_util_Collection | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.Collection'
     */
    removeAllSync(var0: BasicOrJavaType | null): java_util_Collection | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsEntry(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsEntrySync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Iterable'
     * @return original return type: 'java.util.Collection'
     */
    replaceValues(var0: BasicOrJavaType | null, var1: java_lang_Iterable | JavaInterfaceProxy<java_lang_IterableInterface> | null): Promise<java_util_Collection | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Iterable'
     * @return original return type: 'java.util.Collection'
     */
    replaceValuesSync(var0: BasicOrJavaType | null, var1: java_lang_Iterable | JavaInterfaceProxy<java_lang_IterableInterface> | null): java_util_Collection | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    asMap(): Promise<java_util_Map | null>;
    /**
     * @return original return type: 'java.util.Map'
     */
    asMapSync(): java_util_Map | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createMultimapProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface MultimapInterface {
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    remove(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.Collection'
     */
    get(var0: BasicOrJavaType | null): java_util_Collection | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    put(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.util.Collection'
     */
    values(): java_util_Collection | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * @return original return type: 'void'
     */
    clear(): void;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): boolean;
    /**
     * @return original return type: 'int'
     */
    size(): number;
    /**
     * @param var0 original type: 'com.google.common.collect.Multimap'
     * @return original return type: 'boolean'
     */
    putAll(var0: MultimapClass | JavaInterfaceProxy<MultimapInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Iterable'
     * @return original return type: 'boolean'
     */
    putAll(var0: BasicOrJavaType | null, var1: java_lang_Iterable | JavaInterfaceProxy<java_lang_IterableInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    forEach?(var0: java_util_function_BiConsumer | JavaInterfaceProxy<java_util_function_BiConsumerInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsKey(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'com.google.common.collect.Multiset'
     */
    keys(): com_google_common_collect_Multiset | null;
    /**
     * @return original return type: 'java.util.Set'
     */
    keySet(): java_util_Set | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsValue(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.util.Collection'
     */
    entries(): java_util_Collection | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.Collection'
     */
    removeAll(var0: BasicOrJavaType | null): java_util_Collection | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsEntry(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Iterable'
     * @return original return type: 'java.util.Collection'
     */
    replaceValues(var0: BasicOrJavaType | null, var1: java_lang_Iterable | JavaInterfaceProxy<java_lang_IterableInterface> | null): java_util_Collection | null;
    /**
     * @return original return type: 'java.util.Map'
     */
    asMap(): java_util_Map | null;
}
/**
 * Create a proxy for the {@link Multimap} interface.
 * All required methods in {@link MultimapInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createMultimapProxy(methods: MultimapInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<MultimapInterface>;
declare const Multimap_base: typeof MultimapClass;
/**
 * Class com.google.common.collect.Multimap.
 *
 * This actually imports the java class for further use.
 * The class {@link MultimapClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Multimap extends Multimap_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Multimap;
//# sourceMappingURL=Multimap.d.ts.map