import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Buffer as okio_Buffer } from "./Buffer";
import { Long as java_lang_Long } from "./../java/lang/Long";
import { Timeout as okio_Timeout } from "./Timeout";
/**
 * This class just defines types, you should import {@link Source} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SourceClass extends JavaClass {
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    read(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    readSync(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeout(): Promise<okio_Timeout | null>;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeoutSync(): okio_Timeout | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createSourceProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface SourceInterface {
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    read(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeout(): okio_Timeout | null;
}
/**
 * Create a proxy for the {@link Source} interface.
 * All required methods in {@link SourceInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createSourceProxy(methods: SourceInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<SourceInterface>;
declare const Source_base: typeof SourceClass;
/**
 * Class okio.Source.
 *
 * This actually imports the java class for further use.
 * The class {@link SourceClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Source extends Source_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Source;
//# sourceMappingURL=Source.d.ts.map