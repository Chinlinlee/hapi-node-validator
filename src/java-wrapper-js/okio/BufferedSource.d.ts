/// <reference types="node" />
import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Byte as java_lang_Byte } from "./../java/lang/Byte";
import { Long as java_lang_Long } from "./../java/lang/Long";
import { ByteString as okio_ByteString } from "./ByteString";
import { Buffer as okio_Buffer } from "./Buffer";
import { Integer as java_lang_Integer } from "./../java/lang/Integer";
import { ByteBuffer as java_nio_ByteBuffer } from "./../java/nio/ByteBuffer";
import { InputStream as java_io_InputStream } from "./../java/io/InputStream";
import { Charset as java_nio_charset_Charset } from "./../java/nio/charset/Charset";
import { Options as okio_Options } from "./Options";
import { Sink as okio_Sink, SinkInterface as okio_SinkInterface } from "./Sink";
import { Timeout as okio_Timeout } from "./Timeout";
/**
 * This class just defines types, you should import {@link BufferedSource} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BufferedSourceClass extends JavaClass {
    /**
     * @param var0 original type: 'byte'
     * @return original return type: 'long'
     */
    indexOf(var0: java_lang_Byte | number): Promise<number>;
    /**
     * @param var0 original type: 'byte'
     * @return original return type: 'long'
     */
    indexOfSync(var0: java_lang_Byte | number): number;
    /**
     * @param var0 original type: 'byte'
     * @param var1 original type: 'long'
     * @param var2 original type: 'long'
     * @return original return type: 'long'
     */
    indexOf(var0: java_lang_Byte | number, var1: java_lang_Long | bigint | number, var2: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'byte'
     * @param var1 original type: 'long'
     * @param var2 original type: 'long'
     * @return original return type: 'long'
     */
    indexOfSync(var0: java_lang_Byte | number, var1: java_lang_Long | bigint | number, var2: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @return original return type: 'long'
     */
    indexOf(var0: okio_ByteString | null): Promise<number>;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @return original return type: 'long'
     */
    indexOfSync(var0: okio_ByteString | null): number;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    indexOf(var0: okio_ByteString | null, var1: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    indexOfSync(var0: okio_ByteString | null, var1: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'byte'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    indexOf(var0: java_lang_Byte | number, var1: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'byte'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    indexOfSync(var0: java_lang_Byte | number, var1: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'okio.Buffer'
     */
    buffer(): Promise<okio_Buffer | null>;
    /**
     * @return original return type: 'okio.Buffer'
     */
    bufferSync(): okio_Buffer | null;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    readSync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null): Promise<number>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    readSync(var0: Buffer | null): number;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    read(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    readSync(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    read(var0: java_nio_ByteBuffer | null): Promise<number>;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    readSync(var0: java_nio_ByteBuffer | null): number;
    /**
     * @return original return type: 'int'
     */
    readInt(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readIntSync(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    skip(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    skipSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'okio.BufferedSource'
     */
    peek(): Promise<BufferedSource | null>;
    /**
     * @return original return type: 'okio.BufferedSource'
     */
    peekSync(): BufferedSource | null;
    /**
     * @return original return type: 'long'
     */
    readLong(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    readLongSync(): number;
    /**
     * @return original return type: 'byte'
     */
    readByte(): Promise<number>;
    /**
     * @return original return type: 'byte'
     */
    readByteSync(): number;
    /**
     * @return original return type: 'short'
     */
    readShort(): Promise<number>;
    /**
     * @return original return type: 'short'
     */
    readShortSync(): number;
    /**
     * @return original return type: 'java.io.InputStream'
     */
    inputStream(): Promise<java_io_InputStream | null>;
    /**
     * @return original return type: 'java.io.InputStream'
     */
    inputStreamSync(): java_io_InputStream | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'java.lang.String'
     */
    readString(var0: java_lang_Long | bigint | number, var1: java_nio_charset_Charset | null): Promise<string | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'java.lang.String'
     */
    readStringSync(var0: java_lang_Long | bigint | number, var1: java_nio_charset_Charset | null): string | null;
    /**
     * @param var0 original type: 'java.nio.charset.Charset'
     * @return original return type: 'java.lang.String'
     */
    readString(var0: java_nio_charset_Charset | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.nio.charset.Charset'
     * @return original return type: 'java.lang.String'
     */
    readStringSync(var0: java_nio_charset_Charset | null): string | null;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    readFully(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    readFullySync(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null): Promise<void>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFullySync(var0: Buffer | null): void;
    /**
     * @return original return type: 'okio.Buffer'
     */
    getBuffer(): Promise<okio_Buffer | null>;
    /**
     * @return original return type: 'okio.Buffer'
     */
    getBufferSync(): okio_Buffer | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    require(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    requireSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'okio.Options'
     * @return original return type: 'int'
     */
    select(var0: okio_Options | null): Promise<number>;
    /**
     * @param var0 original type: 'okio.Options'
     * @return original return type: 'int'
     */
    selectSync(var0: okio_Options | null): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'boolean'
     */
    request(var0: java_lang_Long | bigint | number): Promise<boolean>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'boolean'
     */
    requestSync(var0: java_lang_Long | bigint | number): boolean;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @return original return type: 'long'
     */
    indexOfElement(var0: okio_ByteString | null): Promise<number>;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @return original return type: 'long'
     */
    indexOfElementSync(var0: okio_ByteString | null): number;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    indexOfElement(var0: okio_ByteString | null, var1: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    indexOfElementSync(var0: okio_ByteString | null, var1: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'boolean'
     */
    exhausted(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    exhaustedSync(): boolean;
    /**
     * @return original return type: 'long'
     */
    readDecimalLong(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    readDecimalLongSync(): number;
    /**
     * @return original return type: 'short'
     */
    readShortLe(): Promise<number>;
    /**
     * @return original return type: 'short'
     */
    readShortLeSync(): number;
    /**
     * @return original return type: 'int'
     */
    readIntLe(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readIntLeSync(): number;
    /**
     * @return original return type: 'long'
     */
    readLongLe(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    readLongLeSync(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'byte[]'
     */
    readByteArray(var0: java_lang_Long | bigint | number): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'byte[]'
     */
    readByteArraySync(var0: java_lang_Long | bigint | number): Buffer | null;
    /**
     * @return original return type: 'byte[]'
     */
    readByteArray(): Promise<Buffer | null>;
    /**
     * @return original return type: 'byte[]'
     */
    readByteArraySync(): Buffer | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    readUtf8(var0: java_lang_Long | bigint | number): Promise<string | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    readUtf8Sync(var0: java_lang_Long | bigint | number): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUtf8(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUtf8Sync(): string | null;
    /**
     * @param var0 original type: 'okio.Sink'
     * @return original return type: 'long'
     */
    readAll(var0: okio_Sink | JavaInterfaceProxy<okio_SinkInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'okio.Sink'
     * @return original return type: 'long'
     */
    readAllSync(var0: okio_Sink | JavaInterfaceProxy<okio_SinkInterface> | null): number;
    /**
     * @return original return type: 'int'
     */
    readUtf8CodePoint(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    readUtf8CodePointSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUtf8Line(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUtf8LineSync(): string | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    readUtf8LineStrict(var0: java_lang_Long | bigint | number): Promise<string | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    readUtf8LineStrictSync(var0: java_lang_Long | bigint | number): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUtf8LineStrict(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUtf8LineStrictSync(): string | null;
    /**
     * @return original return type: 'okio.ByteString'
     */
    readByteString(): Promise<okio_ByteString | null>;
    /**
     * @return original return type: 'okio.ByteString'
     */
    readByteStringSync(): okio_ByteString | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.ByteString'
     */
    readByteString(var0: java_lang_Long | bigint | number): Promise<okio_ByteString | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.ByteString'
     */
    readByteStringSync(var0: java_lang_Long | bigint | number): okio_ByteString | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'okio.ByteString'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'boolean'
     */
    rangeEquals(var0: java_lang_Long | bigint | number, var1: okio_ByteString | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'okio.ByteString'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'boolean'
     */
    rangeEqualsSync(var0: java_lang_Long | bigint | number, var1: okio_ByteString | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'okio.ByteString'
     * @return original return type: 'boolean'
     */
    rangeEquals(var0: java_lang_Long | bigint | number, var1: okio_ByteString | null): Promise<boolean>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'okio.ByteString'
     * @return original return type: 'boolean'
     */
    rangeEqualsSync(var0: java_lang_Long | bigint | number, var1: okio_ByteString | null): boolean;
    /**
     * @return original return type: 'long'
     */
    readHexadecimalUnsignedLong(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    readHexadecimalUnsignedLongSync(): number;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeout(): Promise<okio_Timeout | null>;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeoutSync(): okio_Timeout | null;
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOpenSync(): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBufferedSourceProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BufferedSourceInterface {
    /**
     * @param var0 original type: 'byte'
     * @return original return type: 'long'
     */
    indexOf(var0: java_lang_Byte | number): number;
    /**
     * @param var0 original type: 'byte'
     * @param var1 original type: 'long'
     * @param var2 original type: 'long'
     * @return original return type: 'long'
     */
    indexOf(var0: java_lang_Byte | number, var1: java_lang_Long | bigint | number, var2: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @return original return type: 'long'
     */
    indexOf(var0: okio_ByteString | null): number;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    indexOf(var0: okio_ByteString | null, var1: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'byte'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    indexOf(var0: java_lang_Byte | number, var1: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'okio.Buffer'
     */
    buffer(): okio_Buffer | null;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'int'
     */
    read(var0: Buffer | null): number;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    read(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    read(var0: java_nio_ByteBuffer | null): number;
    /**
     * @return original return type: 'int'
     */
    readInt(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    skip(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'okio.BufferedSource'
     */
    peek(): BufferedSource | null;
    /**
     * @return original return type: 'long'
     */
    readLong(): number;
    /**
     * @return original return type: 'byte'
     */
    readByte(): number;
    /**
     * @return original return type: 'short'
     */
    readShort(): number;
    /**
     * @return original return type: 'java.io.InputStream'
     */
    inputStream(): java_io_InputStream | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'java.lang.String'
     */
    readString(var0: java_lang_Long | bigint | number, var1: java_nio_charset_Charset | null): string | null;
    /**
     * @param var0 original type: 'java.nio.charset.Charset'
     * @return original return type: 'java.lang.String'
     */
    readString(var0: java_nio_charset_Charset | null): string | null;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    readFully(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'void'
     */
    readFully(var0: Buffer | null): void;
    /**
     * @return original return type: 'okio.Buffer'
     */
    getBuffer(): okio_Buffer | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    require(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'okio.Options'
     * @return original return type: 'int'
     */
    select(var0: okio_Options | null): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'boolean'
     */
    request(var0: java_lang_Long | bigint | number): boolean;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @return original return type: 'long'
     */
    indexOfElement(var0: okio_ByteString | null): number;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @param var1 original type: 'long'
     * @return original return type: 'long'
     */
    indexOfElement(var0: okio_ByteString | null, var1: java_lang_Long | bigint | number): number;
    /**
     * @return original return type: 'boolean'
     */
    exhausted(): boolean;
    /**
     * @return original return type: 'long'
     */
    readDecimalLong(): number;
    /**
     * @return original return type: 'short'
     */
    readShortLe(): number;
    /**
     * @return original return type: 'int'
     */
    readIntLe(): number;
    /**
     * @return original return type: 'long'
     */
    readLongLe(): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'byte[]'
     */
    readByteArray(var0: java_lang_Long | bigint | number): Buffer | null;
    /**
     * @return original return type: 'byte[]'
     */
    readByteArray(): Buffer | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    readUtf8(var0: java_lang_Long | bigint | number): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUtf8(): string | null;
    /**
     * @param var0 original type: 'okio.Sink'
     * @return original return type: 'long'
     */
    readAll(var0: okio_Sink | JavaInterfaceProxy<okio_SinkInterface> | null): number;
    /**
     * @return original return type: 'int'
     */
    readUtf8CodePoint(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUtf8Line(): string | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    readUtf8LineStrict(var0: java_lang_Long | bigint | number): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    readUtf8LineStrict(): string | null;
    /**
     * @return original return type: 'okio.ByteString'
     */
    readByteString(): okio_ByteString | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.ByteString'
     */
    readByteString(var0: java_lang_Long | bigint | number): okio_ByteString | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'okio.ByteString'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'boolean'
     */
    rangeEquals(var0: java_lang_Long | bigint | number, var1: okio_ByteString | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'okio.ByteString'
     * @return original return type: 'boolean'
     */
    rangeEquals(var0: java_lang_Long | bigint | number, var1: okio_ByteString | null): boolean;
    /**
     * @return original return type: 'long'
     */
    readHexadecimalUnsignedLong(): number;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeout(): okio_Timeout | null;
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): boolean;
}
/**
 * Create a proxy for the {@link BufferedSource} interface.
 * All required methods in {@link BufferedSourceInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBufferedSourceProxy(methods: BufferedSourceInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BufferedSourceInterface>;
declare const BufferedSource_base: typeof BufferedSourceClass;
/**
 * Class okio.BufferedSource.
 *
 * This actually imports the java class for further use.
 * The class {@link BufferedSourceClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BufferedSource extends BufferedSource_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BufferedSource;
//# sourceMappingURL=BufferedSource.d.ts.map