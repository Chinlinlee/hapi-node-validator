/// <reference types="node" />
import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../java/lang/Integer";
import { Boolean as java_lang_Boolean } from "./../java/lang/Boolean";
import { Segment$Companion as okio_Segment$Companion } from "./Segment$Companion";
import { Long as java_lang_Long } from "./../java/lang/Long";
import { Class as java_lang_Class } from "./../java/lang/Class";
/**
 * This class just defines types, you should import {@link Segment} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SegmentClass extends JavaClass {
    /**
     * Original type: 'byte[]'
     */
    readonly data: Buffer | null;
    /**
     * Original type: 'int'
     */
    pos: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    limit: java_lang_Integer | number;
    /**
     * Original type: 'boolean'
     */
    shared: java_lang_Boolean | boolean;
    /**
     * Original type: 'boolean'
     */
    owner: java_lang_Boolean | boolean;
    /**
     * Original type: 'okio.Segment'
     */
    next: SegmentClass | null;
    /**
     * Original type: 'okio.Segment'
     */
    prev: SegmentClass | null;
    /**
     * Original type: 'int'
     */
    static readonly SIZE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SHARE_MINIMUM: java_lang_Integer | number;
    /**
     * Original type: 'okio.Segment$Companion'
     */
    static readonly Companion: okio_Segment$Companion | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.Segment'
     */
    split(var0: java_lang_Integer | number): Promise<Segment | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.Segment'
     */
    splitSync(var0: java_lang_Integer | number): Segment | null;
    /**
     * @return original return type: 'void'
     */
    compact(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    compactSync(): void;
    /**
     * @param var0 original type: 'okio.Segment'
     * @return original return type: 'okio.Segment'
     */
    push(var0: SegmentClass | null): Promise<Segment | null>;
    /**
     * @param var0 original type: 'okio.Segment'
     * @return original return type: 'okio.Segment'
     */
    pushSync(var0: SegmentClass | null): Segment | null;
    /**
     * @return original return type: 'okio.Segment'
     */
    pop(): Promise<Segment | null>;
    /**
     * @return original return type: 'okio.Segment'
     */
    popSync(): Segment | null;
    /**
     * @param var0 original type: 'okio.Segment'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    writeTo(var0: SegmentClass | null, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'okio.Segment'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    writeToSync(var0: SegmentClass | null, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'okio.Segment'
     */
    unsharedCopy(): Promise<Segment | null>;
    /**
     * @return original return type: 'okio.Segment'
     */
    unsharedCopySync(): Segment | null;
    /**
     * @return original return type: 'okio.Segment'
     */
    sharedCopy(): Promise<Segment | null>;
    /**
     * @return original return type: 'okio.Segment'
     */
    sharedCopySync(): Segment | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'okio.Segment'
     */
    static newInstanceAsync(): Promise<Segment>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'boolean'
     * @param var4 original type: 'boolean'
     * @return original return type: 'okio.Segment'
     */
    static newInstanceAsync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Boolean | boolean, var4: java_lang_Boolean | boolean): Promise<Segment>;
    constructor();
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'boolean'
     * @param var4 original type: 'boolean'
     */
    constructor(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Boolean | boolean, var4: java_lang_Boolean | boolean);
}
declare const Segment_base: typeof SegmentClass;
/**
 * Class okio.Segment.
 *
 * This actually imports the java class for further use.
 * The class {@link SegmentClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Segment extends Segment_base {
}
export default Segment;
//# sourceMappingURL=Segment.d.ts.map