import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Buffer as okio_Buffer } from "./Buffer";
import { Long as java_lang_Long } from "./../java/lang/Long";
import { Timeout as okio_Timeout } from "./Timeout";
/**
 * This class just defines types, you should import {@link Sink} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class SinkClass extends JavaClass {
    /**
     * @return original return type: 'void'
     */
    flush(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    flushSync(): void;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    write(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    writeSync(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeout(): Promise<okio_Timeout | null>;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeoutSync(): okio_Timeout | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createSinkProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface SinkInterface {
    /**
     * @return original return type: 'void'
     */
    flush(): void;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    write(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeout(): okio_Timeout | null;
}
/**
 * Create a proxy for the {@link Sink} interface.
 * All required methods in {@link SinkInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createSinkProxy(methods: SinkInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<SinkInterface>;
declare const Sink_base: typeof SinkClass;
/**
 * Class okio.Sink.
 *
 * This actually imports the java class for further use.
 * The class {@link SinkClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Sink extends Sink_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Sink;
//# sourceMappingURL=Sink.d.ts.map