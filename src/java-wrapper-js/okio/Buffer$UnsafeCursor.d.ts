/// <reference types="node" />
import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Buffer as okio_Buffer } from "./Buffer";
import { Boolean as java_lang_Boolean } from "./../java/lang/Boolean";
import { Long as java_lang_Long } from "./../java/lang/Long";
import { Integer as java_lang_Integer } from "./../java/lang/Integer";
import { Class as java_lang_Class } from "./../java/lang/Class";
/**
 * This class just defines types, you should import {@link Buffer$UnsafeCursor} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Buffer$UnsafeCursorClass extends JavaClass {
    /**
     * Original type: 'okio.Buffer'
     */
    buffer: okio_Buffer | null;
    /**
     * Original type: 'boolean'
     */
    readWrite: java_lang_Boolean | boolean;
    /**
     * Original type: 'long'
     */
    offset: java_lang_Long | bigint | number;
    /**
     * Original type: 'byte[]'
     */
    data: Buffer | null;
    /**
     * Original type: 'int'
     */
    start: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    end: java_lang_Integer | number;
    /**
     * @return original return type: 'int'
     */
    next(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    nextSync(): number;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'int'
     */
    seek(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'int'
     */
    seekSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'long'
     */
    expandBuffer(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'long'
     */
    expandBufferSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    resizeBuffer(var0: java_lang_Long | bigint | number): Promise<number>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'long'
     */
    resizeBufferSync(var0: java_lang_Long | bigint | number): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): Promise<string>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'okio.Buffer$UnsafeCursor'
     */
    static newInstanceAsync(): Promise<Buffer$UnsafeCursor>;
    constructor();
}
declare const Buffer$UnsafeCursor_base: typeof Buffer$UnsafeCursorClass;
/**
 * Class okio.Buffer$UnsafeCursor.
 *
 * This actually imports the java class for further use.
 * The class {@link Buffer$UnsafeCursorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Buffer$UnsafeCursor extends Buffer$UnsafeCursor_base {
}
export default Buffer$UnsafeCursor;
//# sourceMappingURL=Buffer$UnsafeCursor.d.ts.map