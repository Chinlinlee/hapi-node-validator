/// <reference types="node" />
import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Buffer as okio_Buffer } from "./Buffer";
import { Integer as java_lang_Integer } from "./../java/lang/Integer";
import { Source as okio_Source, SourceInterface as okio_SourceInterface } from "./Source";
import { Long as java_lang_Long } from "./../java/lang/Long";
import { ByteString as okio_ByteString } from "./ByteString";
import { ByteBuffer as java_nio_ByteBuffer } from "./../java/nio/ByteBuffer";
import { OutputStream as java_io_OutputStream } from "./../java/io/OutputStream";
import { Charset as java_nio_charset_Charset } from "./../java/nio/charset/Charset";
import { Timeout as okio_Timeout } from "./Timeout";
/**
 * This class just defines types, you should import {@link BufferedSink} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BufferedSinkClass extends JavaClass {
    /**
     * @return original return type: 'void'
     */
    flush(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    flushSync(): void;
    /**
     * @return original return type: 'okio.Buffer'
     */
    buffer(): Promise<okio_Buffer | null>;
    /**
     * @return original return type: 'okio.Buffer'
     */
    bufferSync(): okio_Buffer | null;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeSync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: Buffer | null): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'okio.BufferedSink'
     */
    writeSync(var0: Buffer | null): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.Source'
     * @param var1 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: okio_Source | JavaInterfaceProxy<okio_SourceInterface> | null, var1: java_lang_Long | bigint | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'okio.Source'
     * @param var1 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeSync(var0: okio_Source | JavaInterfaceProxy<okio_SourceInterface> | null, var1: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: okio_ByteString | null): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @return original return type: 'okio.BufferedSink'
     */
    writeSync(var0: okio_ByteString | null): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: okio_ByteString | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeSync(var0: okio_ByteString | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    write(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    writeSync(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    write(var0: java_nio_ByteBuffer | null): Promise<number>;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    writeSync(var0: java_nio_ByteBuffer | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeInt(var0: java_lang_Integer | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeIntSync(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @return original return type: 'java.io.OutputStream'
     */
    outputStream(): Promise<java_io_OutputStream | null>;
    /**
     * @return original return type: 'java.io.OutputStream'
     */
    outputStreamSync(): java_io_OutputStream | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'okio.BufferedSink'
     */
    writeString(var0: string | null, var1: java_nio_charset_Charset | null): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'okio.BufferedSink'
     */
    writeStringSync(var0: string | null, var1: java_nio_charset_Charset | null): BufferedSink | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.nio.charset.Charset'
     * @return original return type: 'okio.BufferedSink'
     */
    writeString(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_nio_charset_Charset | null): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.nio.charset.Charset'
     * @return original return type: 'okio.BufferedSink'
     */
    writeStringSync(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_nio_charset_Charset | null): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeByte(var0: java_lang_Integer | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeByteSync(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeShort(var0: java_lang_Integer | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeShortSync(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeLong(var0: java_lang_Long | bigint | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeLongSync(var0: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @return original return type: 'okio.Buffer'
     */
    getBuffer(): Promise<okio_Buffer | null>;
    /**
     * @return original return type: 'okio.Buffer'
     */
    getBufferSync(): okio_Buffer | null;
    /**
     * @return original return type: 'okio.BufferedSink'
     */
    emit(): Promise<BufferedSink | null>;
    /**
     * @return original return type: 'okio.BufferedSink'
     */
    emitSync(): BufferedSink | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeDecimalLong(var0: java_lang_Long | bigint | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeDecimalLongSync(var0: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeUtf8(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeUtf8Sync(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'okio.BufferedSink'
     */
    writeUtf8(var0: string | null): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'okio.BufferedSink'
     */
    writeUtf8Sync(var0: string | null): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeShortLe(var0: java_lang_Integer | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeShortLeSync(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeUtf8CodePoint(var0: java_lang_Integer | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeUtf8CodePointSync(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeIntLe(var0: java_lang_Integer | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeIntLeSync(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.Source'
     * @return original return type: 'long'
     */
    writeAll(var0: okio_Source | JavaInterfaceProxy<okio_SourceInterface> | null): Promise<number>;
    /**
     * @param var0 original type: 'okio.Source'
     * @return original return type: 'long'
     */
    writeAllSync(var0: okio_Source | JavaInterfaceProxy<okio_SourceInterface> | null): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeLongLe(var0: java_lang_Long | bigint | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeLongLeSync(var0: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeHexadecimalUnsignedLong(var0: java_lang_Long | bigint | number): Promise<BufferedSink | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeHexadecimalUnsignedLongSync(var0: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @return original return type: 'okio.BufferedSink'
     */
    emitCompleteSegments(): Promise<BufferedSink | null>;
    /**
     * @return original return type: 'okio.BufferedSink'
     */
    emitCompleteSegmentsSync(): BufferedSink | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeout(): Promise<okio_Timeout | null>;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeoutSync(): okio_Timeout | null;
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isOpenSync(): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createBufferedSinkProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface BufferedSinkInterface {
    /**
     * @return original return type: 'void'
     */
    flush(): void;
    /**
     * @return original return type: 'okio.Buffer'
     */
    buffer(): okio_Buffer | null;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: Buffer | null): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.Source'
     * @param var1 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: okio_Source | JavaInterfaceProxy<okio_SourceInterface> | null, var1: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: okio_ByteString | null): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.ByteString'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    write(var0: okio_ByteString | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.Buffer'
     * @param var1 original type: 'long'
     * @return original return type: 'void'
     */
    write(var0: okio_Buffer | null, var1: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    write(var0: java_nio_ByteBuffer | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeInt(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @return original return type: 'java.io.OutputStream'
     */
    outputStream(): java_io_OutputStream | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'okio.BufferedSink'
     */
    writeString(var0: string | null, var1: java_nio_charset_Charset | null): BufferedSink | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.nio.charset.Charset'
     * @return original return type: 'okio.BufferedSink'
     */
    writeString(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_nio_charset_Charset | null): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeByte(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeShort(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeLong(var0: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @return original return type: 'okio.Buffer'
     */
    getBuffer(): okio_Buffer | null;
    /**
     * @return original return type: 'okio.BufferedSink'
     */
    emit(): BufferedSink | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeDecimalLong(var0: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeUtf8(var0: string | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'okio.BufferedSink'
     */
    writeUtf8(var0: string | null): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeShortLe(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeUtf8CodePoint(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'okio.BufferedSink'
     */
    writeIntLe(var0: java_lang_Integer | number): BufferedSink | null;
    /**
     * @param var0 original type: 'okio.Source'
     * @return original return type: 'long'
     */
    writeAll(var0: okio_Source | JavaInterfaceProxy<okio_SourceInterface> | null): number;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeLongLe(var0: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'okio.BufferedSink'
     */
    writeHexadecimalUnsignedLong(var0: java_lang_Long | bigint | number): BufferedSink | null;
    /**
     * @return original return type: 'okio.BufferedSink'
     */
    emitCompleteSegments(): BufferedSink | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @return original return type: 'okio.Timeout'
     */
    timeout(): okio_Timeout | null;
    /**
     * @return original return type: 'boolean'
     */
    isOpen(): boolean;
}
/**
 * Create a proxy for the {@link BufferedSink} interface.
 * All required methods in {@link BufferedSinkInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createBufferedSinkProxy(methods: BufferedSinkInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<BufferedSinkInterface>;
declare const BufferedSink_base: typeof BufferedSinkClass;
/**
 * Class okio.BufferedSink.
 *
 * This actually imports the java class for further use.
 * The class {@link BufferedSinkClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class BufferedSink extends BufferedSink_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default BufferedSink;
//# sourceMappingURL=BufferedSink.d.ts.map