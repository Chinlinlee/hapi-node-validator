import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link Function0} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Function0Class extends JavaClass {
    /**
     * @return original return type: 'java.lang.Object'
     */
    invoke(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    invokeSync(): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createFunction0Proxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Function0Interface {
    /**
     * @return original return type: 'java.lang.Object'
     */
    invoke(): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link Function0} interface.
 * All required methods in {@link Function0Interface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createFunction0Proxy(methods: Function0Interface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Function0Interface>;
declare const Function0_base: typeof Function0Class;
/**
 * Class kotlin.jvm.functions.Function0.
 *
 * This actually imports the java class for further use.
 * The class {@link Function0Class} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Function0 extends Function0_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Function0;
//# sourceMappingURL=Function0.d.ts.map